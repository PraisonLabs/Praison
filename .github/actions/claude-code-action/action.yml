name: "Claude Code Action"
description: "Run Claude Code in GitHub Actions workflows"

inputs:
  anthropic_api_key:
    description: "Anthropic API key"
    required: false
  github_token:
    description: "GitHub token for Claude to operate with"
    required: false
    default: ${{ github.token }}
  trigger_phrase:
    description: "The trigger phrase to look for in comments, issue/PR bodies, and issue titles"
    required: false
    default: "@claude"
  assignee_trigger:
    description: "The assignee username that triggers the action (e.g. @claude). Only used for issue assignment"
    required: false
  max_turns:
    description: "Maximum number of conversation turns Claude can take"
    required: false
  timeout_minutes:
    description: "Timeout in minutes for execution"
    required: false
    default: "30"
  model:
    description: "Model to use (provider-specific format required for Bedrock/Vertex)"
    required: false
  use_bedrock:
    description: "Use Amazon Bedrock with OIDC authentication instead of direct Anthropic API"
    required: false
    default: "false"
  use_vertex:
    description: "Use Google Vertex AI with OIDC authentication instead of direct Anthropic API"
    required: false
    default: "false"
  allowed_tools:
    description: "Additional tools for Claude to use (the base GitHub tools will always be included)"
    required: false
    default: ""
  disallowed_tools:
    description: "Tools that Claude should never use"
    required: false
    default: ""
  custom_instructions:
    description: "Additional custom instructions to include in the prompt for Claude"
    required: false
    default: ""
  mcp_config:
    description: "Additional MCP configuration (JSON string) that merges with the built-in GitHub MCP servers"
    required: false
    default: ""
  claude_env:
    description: "Custom environment variables to pass to Claude Code execution (YAML format)"
    required: false
    default: ""
  direct_prompt:
    description: "Direct prompt for Claude to execute automatically without needing a trigger (for automated workflows)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install Claude Code
      shell: bash
      run: npm install -g @anthropic-ai/claude-code

    - name: Install GitHub MCP Server
      shell: bash
      run: |
        claude mcp add-json github '{
          "command": "docker",
          "args": [
            "run",
            "-i",
            "--rm",
            "-e",
            "GITHUB_PERSONAL_ACCESS_TOKEN",
            "ghcr.io/github/github-mcp-server:sha-ff3036d"
          ],
          "env": {
            "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ inputs.github_token }}"
          }
        }'

    - name: Extract GitHub Context and Create Prompt
      shell: bash
      id: prepare_context
      run: |
        echo "üîç Extracting GitHub context from event: ${{ github.event_name }}"
        
        # Function to check for trigger phrase
        check_trigger() {
          local text="$1"
          local trigger="${{ inputs.trigger_phrase }}"
          if [[ "$text" == *"$trigger"* ]]; then
            return 0
          fi
          return 1
        }
        
        # Extract context based on event type
        TRIGGER_FOUND="false"
        USER_REQUEST=""
        CONTEXT_INFO=""
        
        case "${{ github.event_name }}" in
          "issue_comment")
            COMMENT_BODY="${{ github.event.comment.body }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            
            if check_trigger "$COMMENT_BODY"; then
              TRIGGER_FOUND="true"
              USER_REQUEST="$COMMENT_BODY"
              CONTEXT_INFO="Issue Comment on #$ISSUE_NUMBER: $ISSUE_TITLE"
            fi
            ;;
            
          "pull_request_review_comment")
            COMMENT_BODY="${{ github.event.comment.body }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            if check_trigger "$COMMENT_BODY"; then
              TRIGGER_FOUND="true"
              USER_REQUEST="$COMMENT_BODY"
              CONTEXT_INFO="PR Comment on #$PR_NUMBER: $PR_TITLE"
            fi
            ;;
            
          "pull_request_review")
            REVIEW_BODY="${{ github.event.review.body }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            if check_trigger "$REVIEW_BODY"; then
              TRIGGER_FOUND="true"
              USER_REQUEST="$REVIEW_BODY"
              CONTEXT_INFO="PR Review on #$PR_NUMBER: $PR_TITLE"
            fi
            ;;
            
          "issues")
            ISSUE_BODY="${{ github.event.issue.body }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            
            if check_trigger "$ISSUE_TITLE" || check_trigger "$ISSUE_BODY"; then
              TRIGGER_FOUND="true"
              USER_REQUEST="$ISSUE_BODY"
              CONTEXT_INFO="Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
            elif [[ "${{ github.event.action }}" == "assigned" && -n "${{ inputs.assignee_trigger }}" ]]; then
              ASSIGNEE="${{ github.event.assignee.login }}"
              if [[ "$ASSIGNEE" == "${{ inputs.assignee_trigger }}" ]]; then
                TRIGGER_FOUND="true"
                USER_REQUEST="$ISSUE_BODY"
                CONTEXT_INFO="Issue #$ISSUE_NUMBER assigned to $ASSIGNEE: $ISSUE_TITLE"
              fi
            fi
            ;;
        esac
        
        # Check for direct prompt override
        if [[ -n "${{ inputs.direct_prompt }}" ]]; then
          TRIGGER_FOUND="true"
          USER_REQUEST="${{ inputs.direct_prompt }}"
          CONTEXT_INFO="Automated GitHub workflow"
        fi
        
        if [[ "$TRIGGER_FOUND" != "true" ]]; then
          echo "‚ùå No trigger phrase found or direct prompt provided. Exiting gracefully."
          echo "SKIP_EXECUTION=true" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "‚úÖ Trigger found! Context: $CONTEXT_INFO"
        
        # Create comprehensive prompt
        mkdir -p /tmp/claude-action
        cat > /tmp/claude-action/github-context-prompt.txt << EOF
        You are Claude Code, an AI assistant helping with GitHub workflows and code.
        
        Repository: ${{ github.repository }}
        Context: $CONTEXT_INFO
        Event: ${{ github.event_name }}
        
        User Request:
        $USER_REQUEST
        
        Please analyze the request and provide helpful assistance. You have access to repository tools and can help with:
        - Code analysis and implementation
        - GitHub workflows and automation
        - Pull request reviews and feedback
        - Issue resolution and bug fixes
        - Documentation updates
        - Testing and deployment
        
        Respond naturally and helpfully to the user's request using the available tools.
        EOF
        
        echo "PROMPT_FILE=/tmp/claude-action/github-context-prompt.txt" >> $GITHUB_ENV
        echo "SKIP_EXECUTION=false" >> $GITHUB_ENV

    - name: Run Claude Code
      if: env.SKIP_EXECUTION != 'true'
      shell: bash
      run: |
        echo "üöÄ Running Claude Code with GitHub context..."
        
        # Build command arguments
        CMD_ARGS=("-p" "--verbose" "--output-format" "stream-json")
        
        # Add max turns if specified
        if [[ -n "${{ inputs.max_turns }}" ]]; then
          CMD_ARGS+=("--max-turns" "${{ inputs.max_turns }}")
        fi
        
        # Add allowed tools (include GitHub tools by default)
        TOOLS="mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__update_issue,mcp__github__search_issues,mcp__github__list_issues,mcp__github__create_comment,Read,Write,Edit,Bash"
        if [[ -n "${{ inputs.allowed_tools }}" ]]; then
          TOOLS="$TOOLS,${{ inputs.allowed_tools }}"
        fi
        CMD_ARGS+=("--allowedTools" "$TOOLS")
        
        # Add disallowed tools
        if [[ -n "${{ inputs.disallowed_tools }}" ]]; then
          CMD_ARGS+=("--disallowedTools" "${{ inputs.disallowed_tools }}")
        fi
        
        echo "üìù Executing Claude Code with prompt from file..."
        
        # Execute Claude Code with timeout, using stdin for the prompt
        TIMEOUT_SECONDS=$((${{ inputs.timeout_minutes }} * 60))
        timeout $TIMEOUT_SECONDS claude "${CMD_ARGS[@]}" < "${{ env.PROMPT_FILE }}"
        
        echo "‚úÖ Claude Code execution completed"
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        GITHUB_TOKEN: ${{ inputs.github_token }} 