{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Praison AI","text":"<p>Praison AI, leveraging both AutoGen and CrewAI or any other agent framework, represents a low-code, centralised framework designed to simplify the creation and orchestration of multi-agent systems for various LLM applications, emphasizing ease of use, customization, and human-agent interaction.</p>"},{"location":"#prerequisite","title":"Prerequisite:","text":""},{"location":"#export-api-key","title":"Export API KEY","text":"<pre><code>export OPENAI_API_KEY=\"Enter your API key\"\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install praisonai\n</code></pre>"},{"location":"#automatically-create-agents-to-perform-a-task","title":"Automatically Create Agents to Perform a Task","text":"<pre><code>praisonai --init create a movie script about dog in moon\n</code></pre>"},{"location":"#run","title":"Run","text":"<pre><code>praisonai\n</code></pre>"},{"location":"agents_playbook/","title":"Agents Playbook","text":""},{"location":"agents_playbook/#simple-playbook-example","title":"Simple Playbook Example","text":"<pre><code>framework: crewai\ntopic: Artificial Intelligence\nroles:\n  screenwriter:\n    backstory: 'Skilled in crafting scripts with engaging dialogue about {topic}.'\n    goal: Create scripts from concepts.\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Develop scripts with compelling characters and dialogue about {topic}.'\n        expected_output: 'Complete script ready for production.'\n</code></pre>"},{"location":"agents_playbook/#detailed-playbook-example","title":"Detailed Playbook Example","text":"<pre><code>framework: crewai\ntopic: Artificial Intelligence\nroles:\n  movie_concept_creator:\n    backstory: 'Creative thinker with a deep understanding of cinematic storytelling,\n      capable of using AI-generated storylines to create unique and compelling movie\n      ideas.'\n    goal: Generate engaging movie concepts using AI storylines\n    role: Movie Concept Creator\n    tasks:\n      movie_concept_development:\n        description: 'Develop movie concepts from AI-generated storylines, ensuring\n          they are engaging and have strong narrative arcs.'\n        expected_output: 'Well-structured movie concept document with character\n          bios, settings, and plot outlines.'\n  screenwriter:\n    backstory: 'Expert in writing engaging dialogue and script structure, able to\n      turn movie concepts into production-ready scripts.'\n    goal: Write compelling scripts based on movie concepts\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Turn movie concepts into polished scripts with well-developed\n          characters, strong dialogue, and effective scene transitions.'\n        expected_output: 'Production-ready script with a beginning, middle, and\n          end, along with character development and engaging dialogues.'\n  editor:\n    backstory: 'Adept at identifying inconsistencies, improving language usage,\n      and maintaining the overall flow of the script.'\n    goal: Refine the scripts and ensure continuity of the movie storyline\n    role: Editor\n    tasks:\n      editing_task:\n        description: 'Review, edit, and refine the scripts to ensure they are cohesive\n          and follow a well-structured narrative.'\n        expected_output: 'A polished final draft of the script with no inconsistencies,\n          strong character development, and effective dialogue.'\ndependencies: []\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#praisonai.auto.AutoGenerator","title":"<code>AutoGenerator</code>","text":"Source code in <code>praisonai/auto.py</code> <pre><code>class AutoGenerator:\n    def __init__(self, topic=\"Movie Story writing about AI\", agent_file=\"test.yaml\", framework=\"crewai\"):\n        self.config_list = [\n            {\n                'model': os.environ.get(\"OPENAI_MODEL_NAME\", \"gpt-4-turbo-preview\"),\n                'base_url': os.environ.get(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\"),\n            }\n        ]\n        self.topic = topic\n        self.agent_file = agent_file\n        self.framework = framework\n        self.client = instructor.patch(\n            OpenAI(\n                base_url=self.config_list[0]['base_url'],\n                api_key=os.getenv(\"OPENAI_API_KEY\"),\n            ),\n            mode=instructor.Mode.JSON,\n        )\n\n    def generate(self):\n        response = self.client.chat.completions.create(\n            model=self.config_list[0]['model'],\n            response_model=TeamStructure,\n            max_retries=10,\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output complex team structures.\"},\n                {\"role\": \"user\", \"content\": self.get_user_content()}\n            ]\n        )\n        json_data = json.loads(response.model_dump_json())\n        self.convert_and_save(json_data)\n        full_path = os.path.abspath(self.agent_file)\n        return full_path\n\n    def convert_and_save(self, json_data):\n        \"\"\"Converts the provided JSON data into the desired YAML format and saves it to a file.\n\n        Args:\n            json_data (dict): The JSON data representing the team structure.\n            topic (str, optional): The topic to be inserted into the YAML. Defaults to \"Artificial Intelligence\".\n            agent_file (str, optional): The name of the YAML file to save. Defaults to \"test.yaml\".\n        \"\"\"\n\n        yaml_data = {\n            \"framework\": self.framework,\n            \"topic\": self.topic,\n            \"roles\": {},\n            \"dependencies\": []\n        }\n\n        for role_id, role_details in json_data['roles'].items():\n            yaml_data['roles'][role_id] = {\n                \"backstory\": \"\" + role_details['backstory'],\n                \"goal\": role_details['goal'],\n                \"role\": role_details['role'],\n                \"tasks\": {},\n                # \"tools\": role_details.get('tools', []),\n                \"tools\": ['']\n            }\n\n            for task_id, task_details in role_details['tasks'].items():\n                yaml_data['roles'][role_id]['tasks'][task_id] = {\n                    \"description\": \"\" + task_details['description'],\n                    \"expected_output\": \"\" + task_details['expected_output']\n                }\n\n        # Save to YAML file, maintaining the order\n        with open(self.agent_file, 'w') as f:\n            yaml.dump(yaml_data, f, allow_unicode=True, sort_keys=False)\n\n    def get_user_content(self):\n        user_content = \"\"\"Generate a team structure for  \\\"\"\"\" + self.topic + \"\"\"\\\" task. \nNo Input data will be provided to the team.\nThe team will work in sequence. First role will pass the output to the next role, and so on.\nThe last role will generate the final output.\nThink step by step.\nWith maximum 3 roles, each with 1 task. Include role goals, backstories, task descriptions, and expected outputs.\nList of Available Tools: CodeDocsSearchTool, CSVSearchTool, DirectorySearchTool, DOCXSearchTool, DirectoryReadTool, FileReadTool, TXTSearchTool, JSONSearchTool, MDXSearchTool, PDFSearchTool, RagTool, ScrapeElementFromWebsiteTool, ScrapeWebsiteTool, WebsiteSearchTool, XMLSearchTool, YoutubeChannelSearchTool, YoutubeVideoSearchTool.\nOnly use Available Tools. Do Not use any other tools. \nExample Below: \nUse below example to understand the structure of the output. \nThe final role you create should satisfy the provided task: \"\"\" + self.topic + \"\"\".\n{\n\"roles\": {\n\"narrative_designer\": {\n\"role\": \"Narrative Designer\",\n\"goal\": \"Create AI storylines\",\n\"backstory\": \"Skilled in narrative development for AI, with a focus on story resonance.\",\n\"tools\": [\"ScrapeWebsiteTool\"],\n\"tasks\": {\n\"story_concept_development\": {\n\"description\": \"Craft a unique AI story concept with depth and engagement using concept from this page the content https://www.asthebirdfliesblog.com/posts/how-to-write-book-story-development .\",\n\"expected_output\": \"Document with narrative arcs, character bios, and settings.\"\n}\n}\n},\n\"scriptwriter\": {\n\"role\": \"Scriptwriter\",\n\"goal\": \"Write scripts from AI concepts\",\n\"backstory\": \"Expert in dialogue and script structure, translating concepts into scripts.\",\n\"tasks\": {\n\"scriptwriting_task\": {\n\"description\": \"Turn narrative concepts into scripts, including dialogue and scenes.\",\n\"expected_output\": \"Production-ready script with dialogue and scene details.\"\n}\n}\n}\n}\n}\n        \"\"\"\n        return user_content\n</code></pre>"},{"location":"api/#praisonai.auto.AutoGenerator.convert_and_save","title":"<code>convert_and_save(json_data)</code>","text":"<p>Converts the provided JSON data into the desired YAML format and saves it to a file.</p> <p>Parameters:</p> Name Type Description Default <code>json_data</code> <code>dict</code> <p>The JSON data representing the team structure.</p> required <code>topic</code> <code>str</code> <p>The topic to be inserted into the YAML. Defaults to \"Artificial Intelligence\".</p> required <code>agent_file</code> <code>str</code> <p>The name of the YAML file to save. Defaults to \"test.yaml\".</p> required Source code in <code>praisonai/auto.py</code> <pre><code>def convert_and_save(self, json_data):\n    \"\"\"Converts the provided JSON data into the desired YAML format and saves it to a file.\n\n    Args:\n        json_data (dict): The JSON data representing the team structure.\n        topic (str, optional): The topic to be inserted into the YAML. Defaults to \"Artificial Intelligence\".\n        agent_file (str, optional): The name of the YAML file to save. Defaults to \"test.yaml\".\n    \"\"\"\n\n    yaml_data = {\n        \"framework\": self.framework,\n        \"topic\": self.topic,\n        \"roles\": {},\n        \"dependencies\": []\n    }\n\n    for role_id, role_details in json_data['roles'].items():\n        yaml_data['roles'][role_id] = {\n            \"backstory\": \"\" + role_details['backstory'],\n            \"goal\": role_details['goal'],\n            \"role\": role_details['role'],\n            \"tasks\": {},\n            # \"tools\": role_details.get('tools', []),\n            \"tools\": ['']\n        }\n\n        for task_id, task_details in role_details['tasks'].items():\n            yaml_data['roles'][role_id]['tasks'][task_id] = {\n                \"description\": \"\" + task_details['description'],\n                \"expected_output\": \"\" + task_details['expected_output']\n            }\n\n    # Save to YAML file, maintaining the order\n    with open(self.agent_file, 'w') as f:\n        yaml.dump(yaml_data, f, allow_unicode=True, sort_keys=False)\n</code></pre>"},{"location":"api/#praisonai.deploy.CloudDeployer","title":"<code>CloudDeployer</code>","text":"Source code in <code>praisonai/deploy.py</code> <pre><code>class CloudDeployer:\n    def __init__(self):\n        # Load environment variables from .env file or system\n        load_dotenv()\n        self.set_environment_variables()\n\n    def create_dockerfile(self):\n        with open(\"Dockerfile\", \"w\") as file:\n            file.write(\"FROM python:3.11-slim\\n\")\n            file.write(\"WORKDIR /app\\n\")\n            file.write(\"COPY . .\\n\")\n            file.write(\"RUN pip install flask praisonai==0.0.21 gunicorn markdown\\n\")\n            file.write(\"EXPOSE 8080\\n\")\n            file.write('CMD [\"gunicorn\", \"-b\", \"0.0.0.0:8080\", \"api:app\"]\\n')\n\n    def create_api_file(self):\n        with open(\"api.py\", \"w\") as file:\n            file.write(\"from flask import Flask\\n\")\n            file.write(\"from praisonai import PraisonAI\\n\")\n            file.write(\"import markdown\\n\\n\")\n            file.write(\"app = Flask(__name__)\\n\\n\")\n            file.write(\"def basic():\\n\")\n            file.write(\"    praison_ai = PraisonAI(agent_file=\\\"agents.yaml\\\")\\n\")\n            file.write(\"    return praison_ai.main()\\n\\n\")\n            file.write(\"@app.route('/')\\n\")\n            file.write(\"def home():\\n\")\n            file.write(\"    output = basic()\\n\")\n            file.write(\"    html_output = markdown.markdown(output)\\n\")\n            file.write(\"    return f'&lt;html&gt;&lt;body&gt;{html_output}&lt;/body&gt;&lt;/html&gt;'\\n\\n\")\n            file.write(\"if __name__ == \\\"__main__\\\":\\n\")\n            file.write(\"    app.run(debug=True)\\n\")\n\n    def set_environment_variables(self):\n        \"\"\"Sets environment variables with fallback to .env values or defaults.\"\"\"\n        os.environ[\"OPENAI_MODEL_NAME\"] = os.getenv(\"OPENAI_MODEL_NAME\", \"gpt-4-turbo-preview\")\n        os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\", \"Enter your API key\")\n        os.environ[\"OPENAI_API_BASE\"] = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\")\n\n    def run_commands(self):\n        self.create_api_file()\n        self.create_dockerfile()\n        \"\"\"Runs a sequence of shell commands for deployment, continues on error.\"\"\"\n        commands = [\n            \"yes | gcloud auth configure-docker us-central1-docker.pkg.dev\",\n            \"gcloud artifacts repositories create praisonai-repository --repository-format=docker --location=us-central1\",\n            \"docker build --platform linux/amd64 -t gcr.io/$(gcloud config get-value project)/praisonai-app:latest .\",\n            \"docker tag gcr.io/$(gcloud config get-value project)/praisonai-app:latest us-central1-docker.pkg.dev/$(gcloud config get-value project)/praisonai-repository/praisonai-app:latest\",\n            \"docker push us-central1-docker.pkg.dev/$(gcloud config get-value project)/praisonai-repository/praisonai-app:latest\",\n            \"gcloud run deploy praisonai-service --image us-central1-docker.pkg.dev/$(gcloud config get-value project)/praisonai-repository/praisonai-app:latest --platform managed --region us-central1 --allow-unauthenticated --set-env-vars OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME},OPENAI_API_KEY=${OPENAI_API_KEY},OPENAI_API_BASE=${OPENAI_API_BASE}\"\n        ]\n\n        for cmd in commands:\n            try:\n                subprocess.run(cmd, shell=True, check=True)\n            except subprocess.CalledProcessError as e:\n                print(f\"ERROR: Command '{e.cmd}' failed with exit status {e.returncode}\")\n                print(f\"Continuing with the next command...\")\n</code></pre>"},{"location":"api/#praisonai.deploy.CloudDeployer.set_environment_variables","title":"<code>set_environment_variables()</code>","text":"<p>Sets environment variables with fallback to .env values or defaults.</p> Source code in <code>praisonai/deploy.py</code> <pre><code>def set_environment_variables(self):\n    \"\"\"Sets environment variables with fallback to .env values or defaults.\"\"\"\n    os.environ[\"OPENAI_MODEL_NAME\"] = os.getenv(\"OPENAI_MODEL_NAME\", \"gpt-4-turbo-preview\")\n    os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\", \"Enter your API key\")\n    os.environ[\"OPENAI_API_BASE\"] = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\")\n</code></pre>"},{"location":"auto/","title":"Auto","text":""},{"location":"auto/#full-automatic-mode","title":"Full Automatic Mode","text":"<pre><code>praisonai --auto create a movie script about Dog in Moon\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<ul> <li>Fork on GitHub: Use the \"Fork\" button on the repository page.</li> <li>Clone your fork: <code>git clone https://github.com/yourusername/praisonAI.git</code></li> <li>Create a branch: <code>git checkout -b new-feature</code></li> <li>Make changes and commit: <code>git commit -am \"Add some feature\"</code></li> <li>Push to your fork: <code>git push origin new-feature</code></li> <li>Submit a pull request via GitHub's web interface.</li> <li>Await feedback from project maintainers.</li> </ul>"},{"location":"create_custom_tools/","title":"Create Custom Tools","text":""},{"location":"create_custom_tools/#tldr-to-create-a-custom-tool","title":"TL;DR to Create a Custom Tool","text":"<pre><code>pip install praisonai duckduckgo-search\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --init research about the latest AI News and prepare a detailed report\n</code></pre> <ul> <li>Add <code>- InternetSearchTool</code> in the agents.yaml file in the tools section. </li> <li>Create a file called tools.py and add this code tools.py</li> </ul> <pre><code>praisonai\n</code></pre>"},{"location":"create_custom_tools/#pre-requisite-to-create-a-custom-tool","title":"Pre-requisite to Create a Custom Tool","text":"<p><code>agents.yaml</code> file should be present in the current directory. </p> <p>If it doesn't exist, create it by running the command <code>praisonai --init research about the latest AI News and prepare a detailed report</code>.</p>"},{"location":"create_custom_tools/#step-1-to-create-a-custom-tool","title":"Step 1 to Create a Custom Tool","text":"<p>Create a file called tools.py in the same directory as the agents.yaml file.</p> <pre><code># example tools.py\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n</code></pre>"},{"location":"create_custom_tools/#step-2-to-create-a-custom-tool","title":"Step 2 to Create a Custom Tool","text":"<p>Add the tool to the agents.yaml file as show below under the tools section <code>- InternetSearchTool</code>.</p> <pre><code>framework: crewai\ntopic: research about the latest AI News and prepare a detailed report\nroles:\n  research_analyst:\n    backstory: Experienced in gathering and analyzing data related to AI news trends.\n    goal: Analyze AI News trends\n    role: Research Analyst\n    tasks:\n      gather_data:\n        description: Conduct in-depth research on the latest AI News trends from reputable\n          sources.\n        expected_output: Comprehensive report on current AI News trends.\n    tools:\n    - InternetSearchTool\n</code></pre>"},{"location":"deploy/","title":"Deploy","text":""},{"location":"deploy/#google-cloud","title":"Google Cloud","text":"<pre><code>gcloud init\ngcloud services enable run.googleapis.com\ngcloud services enable containerregistry.googleapis.com\ngcloud services enable cloudbuild.googleapis.com\n\nexport OPENAI_MODEL_NAME=\"gpt-4-turbo-preview\"\nexport OPENAI_API_KEY=\"Enter your API key\"\nexport OPENAI_API_BASE=\"https://api.openai.com/v1\"\n\nyes | gcloud auth configure-docker us-central1-docker.pkg.dev \ngcloud artifacts repositories create praisonai-repository --repository-format=docker --location=us-central1\n\nPROJECT_ID=$(gcloud config get-value project)\nTAG=\"latest\"\ndocker build --platform linux/amd64 -t gcr.io/${PROJECT_ID}/praisonai-app:${TAG} .\ndocker tag gcr.io/${PROJECT_ID}/praisonai-app:${TAG} us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG}\ndocker push us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG}\n\ngcloud run deploy praisonai-service \\\n    --image us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG} \\\n    --platform managed \\\n    --region us-central1 \\\n    --allow-unauthenticated \\\n    --set-env-vars OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME},OPENAI_API_KEY=${OPENAI_API_KEY},OPENAI_API_BASE=${OPENAI_API_BASE}\n</code></pre>"},{"location":"initialise/","title":"Initialise","text":"<pre><code>export OPENAI_API_KEY=\"Enter your API key\"\n</code></pre> <p>Generate your OPENAI API KEY from here: https://platform.openai.com/api-keys</p> <p>Note: You can use other providers such as Ollama, Mistral ... etc. Details are provided at the bottom.</p> <p><pre><code>praisonai --init create a movie script about dog in moon\n</code></pre> This will automatically create agents.yaml file in the current directory.</p>"},{"location":"installation/","title":"Installation","text":"<pre><code>pip install praisonai\n</code></pre>"},{"location":"other_models/","title":"Other Models","text":"<pre><code>Ollama\nOPENAI_API_BASE='http://localhost:11434/v1'\nOPENAI_MODEL_NAME='mistral'\nOPENAI_API_KEY='NA'\n\nFastChat\u00b6\nOPENAI_API_BASE=\"http://localhost:8001/v1\"\nOPENAI_MODEL_NAME='oh-2.5m7b-q51'\nOPENAI_API_KEY=NA\n\nLM Studio\u00b6\nOPENAI_API_BASE=\"http://localhost:8000/v1\"\nOPENAI_MODEL_NAME=NA\nOPENAI_API_KEY=NA\n\nMistral API\u00b6\nOPENAI_API_BASE=https://api.mistral.ai/v1\nOPENAI_MODEL_NAME=\"mistral-small\"\nOPENAI_API_KEY=your-mistral-api-key\n</code></pre>"},{"location":"run/","title":"Run","text":"<pre><code>praisonai\n</code></pre> <p>or </p> <pre><code>python -m praisonai\n</code></pre>"},{"location":"run/#specify-the-agent-framework-optional","title":"Specify the agent framework (Optional):","text":"<pre><code>praisonai --framework autogen\n</code></pre>"},{"location":"run/#full-automatic-mode","title":"Full Automatic Mode","text":"<pre><code>praisonai --auto create a movie script about Dog in Moon\n</code></pre>"},{"location":"test/","title":"Test","text":"<pre><code>python -m unittest tests.test \n</code></pre>"},{"location":"tldr/","title":"TL;DR","text":"<pre><code>pip install praisonai\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --init create a movie script about dog in moon\npraisonai\n</code></pre>"},{"location":"wrapper/","title":"Wrapper","text":""},{"location":"wrapper/#include-praisonai-package-in-your-project","title":"Include praisonai package in your project","text":"<p>Note: Please create agents.yaml file before hand. </p> <pre><code>from praisonai import PraisonAI\n\ndef basic(): # Basic Mode\n    praison_ai = PraisonAI(agent_file=\"agents.yaml\")\n    praison_ai.main()\n\nif __name__ == \"__main__\":\n    basic()\n</code></pre>"},{"location":"wrapper/#all-in-one","title":"All in one","text":"<pre><code>from praisonai import PraisonAI\n\ndef basic(): # Basic Mode\n    praison_ai = PraisonAI(agent_file=\"agents.yaml\")\n    praison_ai.main()\n\ndef advanced(): # Advanced Mode with options\n    praison_ai = PraisonAI(\n        agent_file=\"agents.yaml\",\n        framework=\"autogen\",\n    )\n    praison_ai.main()\n\ndef auto(): # Full Automatic Mode\n    praison_ai = PraisonAI(\n        auto=\"Create a movie script about car in mars\",\n        framework=\"autogen\"\n    )\n    print(praison_ai.framework)\n    praison_ai.main()\n\nif __name__ == \"__main__\":\n    basic()\n    advanced()\n    auto()\n</code></pre>"}]}