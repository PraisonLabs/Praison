{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Praison AI","text":"<p>Praison AI, leveraging both AutoGen and CrewAI or any other agent framework, represents a low-code, centralised framework designed to simplify the creation and orchestration of multi-agent systems for various LLM applications, emphasizing ease of use, customization, and human-agent interaction.</p>"},{"location":"#different-user-interfaces","title":"Different User Interfaces:","text":"Interface Description URL UI Multi Agents such as CrewAI or AutoGen https://docs.praison.ai/ui/ui Chat Chat with 100+ LLMs, single AI Agent https://docs.praison.ai/ui/chat Code Chat with entire Codebase, single AI Agent https://docs.praison.ai/ui/code"},{"location":"#google-colab-multi-agents","title":"Google Colab Multi Agents","text":"Cookbook Open in Colab Basic PraisonAI Include Tools PraisonAI Tools"},{"location":"#install","title":"Install","text":"PraisonAI PraisonAI Code PraisonAI Chat <code>pip install praisonai</code> <code>pip install \"praisonai[code]\"</code> <code>pip install \"praisonai[chat]\"</code>"},{"location":"#tldr-multi-agents","title":"TL;DR Multi Agents","text":"<pre><code>pip install praisonai\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --init create a movie script about dog in moon\npraisonai\n</code></pre>"},{"location":"#prerequisite","title":"Prerequisite:","text":""},{"location":"#export-api-key","title":"Export API KEY","text":"<pre><code>export OPENAI_API_KEY=\"Enter your API key\"\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install praisonai\n</code></pre>"},{"location":"#automatically-create-agents-to-perform-a-task","title":"Automatically Create Agents to Perform a Task","text":"<pre><code>praisonai --init create a movie script about dog in moon\n</code></pre>"},{"location":"#run","title":"Run","text":"<pre><code>praisonai\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#core-modules","title":"Core Modules","text":""},{"location":"api/#praisonai","title":"praisonai","text":"<p>The main package containing core functionality.</p> <pre><code>from praisonai import PraisonAI\n</code></pre>"},{"location":"api/#praisonaiauto","title":"praisonai.auto","text":"<p>Automated agent generation functionality.</p> <pre><code>from praisonai.auto import AutoGenerator\n</code></pre>"},{"location":"api/#praisonaiagents_generator","title":"praisonai.agents_generator","text":"<p>Framework-specific agent generation and orchestration: - CrewAI support (requires <code>praisonai[crewai]</code>) - AutoGen support (requires <code>praisonai[autogen]</code>)</p> <pre><code>from praisonai.agents_generator import AgentsGenerator\n</code></pre>"},{"location":"api/#praisonaicli","title":"praisonai.cli","text":"<p>Command-line interface with framework-specific handling.</p> <pre><code>from praisonai.cli import PraisonAI\n</code></pre>"},{"location":"api/#praisonaideploy","title":"praisonai.deploy","text":"<p>Deployment utilities.</p> <pre><code>from praisonai.deploy import CloudDeployer\n</code></pre>"},{"location":"api/#installation-options","title":"Installation Options","text":"<pre><code># Basic installation\npip install praisonai\n\n# Framework-specific installations\npip install \"praisonai[crewai]\"    # Install with CrewAI support\npip install \"praisonai[autogen]\"   # Install with AutoGen support\npip install \"praisonai[crewai,autogen]\"  # Install both frameworks\n\n# Additional features\npip install \"praisonai[ui]\"        # Install UI support\npip install \"praisonai[chat]\"      # Install Chat interface\npip install \"praisonai[code]\"      # Install Code interface\npip install \"praisonai[realtime]\"  # Install Realtime voice interaction\npip install \"praisonai[call]\"      # Install Call feature\n</code></pre>"},{"location":"api/#framework-specific-features","title":"Framework-specific Features","text":""},{"location":"api/#crewai","title":"CrewAI","text":"<p>When installing with <code>pip install \"praisonai[crewai]\"</code>, you get: - CrewAI framework support - PraisonAI tools integration - Task delegation capabilities - Sequential and parallel task execution</p>"},{"location":"api/#autogen","title":"AutoGen","text":"<p>When installing with <code>pip install \"praisonai[autogen]\"</code>, you get: - AutoGen framework support - PraisonAI tools integration - Multi-agent conversation capabilities - Code execution environment</p>"},{"location":"auto/","title":"Auto Generation Mode","text":"<p>PraisonAI supports automatic agent generation with both CrewAI and AutoGen frameworks.</p>"},{"location":"auto/#installation","title":"Installation","text":"<p>Choose your preferred framework:</p> <pre><code># For CrewAI\npip install \"praisonai[crewai]\"\n\n# For AutoGen\npip install \"praisonai[autogen]\"\n\n# For both frameworks\npip install \"praisonai[crewai,autogen]\"\n</code></pre>"},{"location":"auto/#usage","title":"Usage","text":""},{"location":"auto/#with-crewai-default","title":"With CrewAI (Default)","text":"<pre><code>praisonai --auto \"create a movie script about Dog in Moon\"\n</code></pre>"},{"location":"auto/#with-autogen","title":"With AutoGen","text":"<pre><code>praisonai --framework autogen --auto \"create a movie script about Dog in Moon\"\n</code></pre>"},{"location":"auto/#framework-specific-features","title":"Framework-specific Features","text":""},{"location":"auto/#crewai","title":"CrewAI","text":"<ul> <li>Task delegation capabilities</li> <li>Sequential and parallel task execution</li> <li>Built-in tools integration</li> <li>Structured agent-task relationships</li> </ul>"},{"location":"auto/#autogen","title":"AutoGen","text":"<ul> <li>Multi-agent conversation capabilities</li> <li>Code execution environment</li> <li>Built-in tools integration</li> <li>Flexible agent interactions</li> </ul> <pre><code>praisonai --auto \"create a movie script about Dog in Moon\"\n</code></pre>"},{"location":"call/","title":"PraisonAI Call","text":""},{"location":"call/#ai-customer-service","title":"AI Customer Service","text":"<p>PraisonAI Call is a feature that enables voice-based interaction with AI models through phone calls. This functionality allows users to have natural conversations with AI agents over traditional phone lines.</p>"},{"location":"call/#installation","title":"Installation","text":""},{"location":"call/#step-1","title":"Step 1","text":"<pre><code>pip install \"praisonai[call]\"\nexport OPENAI_API_KEY=\"enter your openai api key here\"\nexport NGROK_AUTH_TOKEN=\"enter your ngrok auth token here\"\npraisonai call --public\n</code></pre>"},{"location":"call/#step-2","title":"Step 2","text":"<p>Buy a number at PraisonAI Dashboard</p>"},{"location":"call/#step-3","title":"Step 3","text":"<p>Enter the Public URL in the PraisonAI Dashboard phone number field</p>"},{"location":"call/#features","title":"Features","text":"<ul> <li>Make and receive phone calls with AI agents</li> <li>Natural language processing for voice interactions</li> <li>Support for multiple phone carriers and providers</li> <li>Call recording and transcription capabilities</li> <li>Integration with other PraisonAI features</li> </ul>"},{"location":"call/#adding-tools","title":"Adding Tools","text":"<ol> <li>Create a file called <code>tools.py</code></li> <li> <p>Add the following code: <pre><code>import yfinance as yf\n\n# Get Stock Price definition\nget_stock_price_def = {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol\",\n    \"parameters\": {\n        \"type\": \"object\", \n        \"properties\": {\n            \"ticker_symbol\": {\n                \"type\": \"string\", \n                \"description\": \"The ticker symbol of the stock (e.g., AAPL, GOOGL)\"\n            }\n        }, \n        \"required\": [\"ticker_symbol\"]\n    }\n}\n\n# Get Stock Price function / Tool\nasync def get_stock_price_handler(ticker_symbol):\n    try:\n        stock = yf.Ticker(ticker_symbol)\n        hist = stock.history(period=\"1d\")\n        if hist.empty:\n            return {\"error\": f\"No data found for ticker {ticker_symbol}\"}\n        current_price = hist['Close'].iloc[-1]  # Using -1 is safer than 0\n        return {\"price\": str(current_price)}\n    except Exception as e:\n        return {\"error\": str(e)}\n\n\n\nget_stock_price = (get_stock_price_def, get_stock_price_handler)\ntools = [\n    get_stock_price\n]\n</code></pre></p> </li> <li> <p>```bash pip install yfinance <pre><code>4. ```bash\nexport OPENAI_API_KEY=\"enter your openai api key here\"\nexport NGROK_AUTH_TOKEN=\"enter your ngrok auth token here\"\npraisonai call --public\n</code></pre></p> </li> </ol>"},{"location":"call/#manage-google-calendar-events","title":"Manage Google Calendar Events","text":"<p>See Google Calendar Tools</p>"},{"location":"call/#deploy","title":"Deploy","text":""},{"location":"call/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Use an official Python runtime as a parent image\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# Set work directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    build-essential \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install PraisonAI with the 'call' extra and ensure it's the latest version\nRUN pip install --no-cache-dir --upgrade \"praisonai[call]\"\n\n# Expose the port the app runs on\nEXPOSE 8090\n\n# Run the application\nCMD [\"praisonai\", \"call\"]\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<ul> <li>Fork on GitHub: Use the \"Fork\" button on the repository page.</li> <li>Clone your fork: <code>git clone https://github.com/yourusername/praisonAI.git</code></li> <li>Create a branch: <code>git checkout -b new-feature</code></li> <li>Make changes and commit: <code>git commit -am \"Add some feature\"</code></li> <li>Push to your fork: <code>git push origin new-feature</code></li> <li>Submit a pull request via GitHub's web interface.</li> <li>Await feedback from project maintainers.</li> </ul>"},{"location":"deploy/","title":"Deploy","text":""},{"location":"deploy/#google-cloud","title":"Google Cloud","text":"<pre><code>gcloud init\ngcloud services enable run.googleapis.com\ngcloud services enable containerregistry.googleapis.com\ngcloud services enable cloudbuild.googleapis.com\n\nexport OPENAI_MODEL_NAME=\"gpt-4o\"\nexport OPENAI_API_KEY=\"Enter your API key\"\nexport OPENAI_API_BASE=\"https://api.openai.com/v1\"\n\nyes | gcloud auth configure-docker us-central1-docker.pkg.dev \ngcloud artifacts repositories create praisonai-repository --repository-format=docker --location=us-central1\n\nPROJECT_ID=$(gcloud config get-value project)\nTAG=\"latest\"\ndocker build --platform linux/amd64 -t gcr.io/${PROJECT_ID}/praisonai-app:${TAG} .\ndocker tag gcr.io/${PROJECT_ID}/praisonai-app:${TAG} us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG}\ndocker push us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG}\n\ngcloud run deploy praisonai-service \\\n    --image us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG} \\\n    --platform managed \\\n    --region us-central1 \\\n    --allow-unauthenticated \\\n    --set-env-vars OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME},OPENAI_API_KEY=${OPENAI_API_KEY},OPENAI_API_BASE=${OPENAI_API_BASE}\n</code></pre>"},{"location":"firecrawl/","title":"Firecrawl PraisonAI Integration","text":""},{"location":"firecrawl/#firecrawl-running-in-localhost3002","title":"Firecrawl running in Localhost:3002","text":"<pre><code>from firecrawl import FirecrawlApp\nfrom praisonai_tools import BaseTool\nimport re\n\nclass WebPageScraperTool(BaseTool):\n    name: str = \"Web Page Scraper Tool\"\n    description: str = \"Scrape and extract information from a given web page URL.\"\n\n    def _run(self, url: str) -&gt; str:\n        app = FirecrawlApp(api_url='http://localhost:3002')\n        response = app.scrape_url(url=url)\n        content = response[\"content\"]\n        # Remove all content above the line \"========================================================\"\n        if \"========================================================\" in content:\n            content = content.split(\"========================================================\", 1)[1]\n\n        # Remove all menu items and similar patterns\n        content = re.sub(r'\\*\\s+\\[.*?\\]\\(.*?\\)', '', content)\n        content = re.sub(r'\\[Skip to the content\\]\\(.*?\\)', '', content)\n        content = re.sub(r'\\[.*?\\]\\(.*?\\)', '', content)\n        content = re.sub(r'\\s*Menu\\s*', '', content)\n        content = re.sub(r'\\s*Search\\s*', '', content)\n        content = re.sub(r'Categories\\s*', '', content)\n\n        # Remove all URLs\n        content = re.sub(r'http\\S+', '', content)\n\n        # Remove empty lines or lines with only whitespace\n        content = '\\n'.join([line for line in content.split('\\n') if line.strip()])\n\n        # Limit to the first 1000 words\n        words = content.split()\n        if len(words) &gt; 1000:\n            content = ' '.join(words[:1000])\n\n        return content\n</code></pre>"},{"location":"home/","title":"Home","text":""},{"location":"home/#praison-ai","title":"Praison AI","text":"<p>Praison AI, leveraging both AutoGen and CrewAI or any other agent framework, represents a low-code, centralised framework designed to simplify the creation and orchestration of multi-agent systems for various LLM applications, emphasizing ease of use, customization, and human-agent interaction.</p>"},{"location":"home/#different-user-interfaces","title":"Different User Interfaces:","text":"Interface Description URL UI Multi Agents such as CrewAI or AutoGen https://docs.praison.ai/ui/ui Chat Chat with 100+ LLMs, single AI Agent https://docs.praison.ai/ui/chat Code Chat with entire Codebase, single AI Agent https://docs.praison.ai/ui/code"},{"location":"home/#google-colab-multi-agents","title":"Google Colab Multi Agents","text":"Cookbook Open in Colab Basic PraisonAI Include Tools PraisonAI Tools"},{"location":"home/#installation-options","title":"Installation Options","text":""},{"location":"home/#basic-installation","title":"Basic Installation","text":"<pre><code>pip install praisonai\n</code></pre>"},{"location":"home/#framework-specific-installation","title":"Framework-specific Installation","text":"<pre><code># Install with CrewAI support\npip install \"praisonai[crewai]\"\n\n# Install with AutoGen support\npip install \"praisonai[autogen]\"\n\n# Install with both frameworks\npip install \"praisonai[crewai,autogen]\"\n</code></pre>"},{"location":"home/#ui-and-additional-features","title":"UI and Additional Features","text":"<pre><code>pip install \"praisonai[ui]\"        # UI support\npip install \"praisonai[chat]\"      # Chat interface\npip install \"praisonai[code]\"      # Code interface\npip install \"praisonai[realtime]\"  # Realtime voice interaction\npip install \"praisonai[call]\"      # Call feature\n</code></pre>"},{"location":"home/#tldr-multi-agents","title":"TL;DR Multi Agents","text":"<pre><code>pip install praisonai\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --init create a movie script about dog in moon\npraisonai\n</code></pre>"},{"location":"home/#initialise","title":"Initialise","text":"<pre><code>export OPENAI_API_KEY=\"Enter your API key\"\n</code></pre> <p>Generate your OPENAI API KEY from here: https://platform.openai.com/api-keys</p> <p>Note: You can use other providers such as Ollama, Mistral ... etc. Details are provided at the bottom.</p> <p><pre><code>praisonai --init create a movie script about dog in moon\n</code></pre> This will automatically create agents.yaml file in the current directory.</p>"},{"location":"home/#to-initialse-with-a-specific-agent-framework-optional","title":"To initialse with a specific agent framework (Optional):","text":"<pre><code>praisonai --framework autogen --init create movie script about cat in mars\n</code></pre>"},{"location":"home/#run","title":"Run","text":"<pre><code>praisonai\n</code></pre> <p>or </p> <pre><code>python -m praisonai\n</code></pre>"},{"location":"home/#specify-the-agent-framework-optional","title":"Specify the agent framework (Optional):","text":"<pre><code>praisonai --framework autogen\n</code></pre>"},{"location":"home/#full-automatic-mode","title":"Full Automatic Mode","text":"<pre><code>praisonai --auto create a movie script about Dog in Moon\n</code></pre>"},{"location":"initialise/","title":"Initialise","text":"<pre><code>export OPENAI_API_KEY=\"Enter your API key\"\n</code></pre> <p>Generate your OPENAI API KEY from here: https://platform.openai.com/api-keys</p> <p>Note: You can use other providers such as Ollama, Mistral ... etc. Details are provided at the bottom.</p> <p><pre><code>praisonai --init create a movie script about dog in moon\n</code></pre> This will automatically create agents.yaml file in the current directory.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<pre><code>pip install praisonai\n</code></pre>"},{"location":"installation/#framework-specific-installation","title":"Framework-specific Installation","text":""},{"location":"installation/#crewai-support","title":"CrewAI Support","text":"<pre><code>pip install \"praisonai[crewai]\"\n</code></pre> <p>Includes: - CrewAI framework - PraisonAI tools integration - Task delegation capabilities - Sequential and parallel task execution</p>"},{"location":"installation/#autogen-support","title":"AutoGen Support","text":"<pre><code>pip install \"praisonai[autogen]\"\n</code></pre> <p>Includes: - AutoGen framework - PraisonAI tools integration - Multi-agent conversation capabilities - Code execution environment</p>"},{"location":"installation/#both-frameworks","title":"Both Frameworks","text":"<pre><code>pip install \"praisonai[crewai,autogen]\"\n</code></pre>"},{"location":"installation/#additional-features","title":"Additional Features","text":"<pre><code># UI support\npip install \"praisonai[ui]\"\n\n# Chat interface\npip install \"praisonai[chat]\"\n\n# Code interface\npip install \"praisonai[code]\"\n\n# Realtime voice interaction\npip install \"praisonai[realtime]\"\n\n# Call feature\npip install \"praisonai[call]\"\n</code></pre>"},{"location":"introduction/","title":"Introduction to PraisonAI","text":"<p>Welcome to PraisonAI documentation! PraisonAI is a low-code, centralized framework designed to simplify the creation and orchestration of multi-agent systems for various LLM applications, emphasizing ease of use, customization, and human-agent interaction.</p>"},{"location":"introduction/#key-features","title":"Key Features","text":"<ul> <li>Leverages both AutoGen and CrewAI</li> <li>Simplifies multi-agent system creation</li> <li>Emphasizes ease of use and customization</li> <li>Supports human-agent interaction</li> </ul>"},{"location":"introduction/#getting-started","title":"Getting Started","text":"<p>To get started with PraisonAI, check out our Installation guide.</p> <p>For a quick overview, see our TL;DR page.</p>"},{"location":"introduction/#explore-further","title":"Explore Further","text":"<ul> <li>User Interface</li> <li>Models</li> <li>Tools</li> <li>API Reference</li> </ul>"},{"location":"models/","title":"Models in PraisonAI","text":"PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Below Models <ul> <li>OpenAI</li> <li>Groq</li> <li>Google Gemini</li> <li>Anthropic Claude</li> <li>Cohere</li> <li>Mistral</li> <li>Ollama</li> <li>Other Models</li> </ul>"},{"location":"models/#example-agentsyaml","title":"Example agents.yaml","text":"<p>This uses Multi-Agents with Multi-LLMs.</p> <pre><code>framework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    llm:  \n      model: \"groq/llama3-70b-8192\"\n    function_calling_llm: \n      model: \"google/gemini-1.5-flash-001\"\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'InternetSearchTool'\n  medical_writer:\n    backstory: Skilled in translating complex medical information into accessible\n      content.\n    goal: Compile comprehensive content on lung disease causes\n    role: Medical Writer\n    llm:  \n      model: \"anthropic/claude-3-haiku-20240307\"\n    function_calling_llm: \n      model: \"openai/gpt-4o\"\n    tasks:\n      content_creation:\n        description: Create detailed content summarizing the research findings on\n          lung disease causes.\n        expected_output: Document outlining various causes and risk factors of lung\n          diseases.\n    tools:\n    - ''\n  editor:\n    backstory: Proficient in editing medical content for accuracy and clarity.\n    goal: Review and refine content on lung disease causes\n    role: Editor\n    llm:  \n      model: \"cohere/command-r\"\n    tasks:\n      content_review:\n        description: Edit and refine the compiled content on lung disease causes for\n          accuracy and coherence.\n        expected_output: Finalized document on lung disease causes ready for dissemination.\n    tools:\n    - ''\ndependencies: []\n</code></pre>"},{"location":"run/","title":"Run","text":"<pre><code>praisonai\n</code></pre> <p>or </p> <pre><code>python -m praisonai\n</code></pre>"},{"location":"run/#specify-the-agent-framework-optional","title":"Specify the agent framework (Optional):","text":"<pre><code>praisonai --framework autogen\n</code></pre>"},{"location":"run/#full-automatic-mode","title":"Full Automatic Mode","text":"<pre><code>praisonai --auto create a movie script about Dog in Moon\n</code></pre>"},{"location":"tldr/","title":"TL;DR","text":""},{"location":"tldr/#quick-start-with-crewai-default","title":"Quick Start with CrewAI (Default)","text":"<pre><code># Install with CrewAI support\npip install \"praisonai[crewai]\"\n\n# Set your API key\nexport OPENAI_API_KEY=\"Enter your API key\"\n\n# Initialize and run\npraisonai --init \"create a movie script about dog in moon\"\npraisonai\n</code></pre>"},{"location":"tldr/#quick-start-with-autogen","title":"Quick Start with AutoGen","text":"<pre><code># Install with AutoGen support\npip install \"praisonai[autogen]\"\n\n# Set your API key\nexport OPENAI_API_KEY=\"Enter your API key\"\n\n# Initialize and run\npraisonai --framework autogen --init \"create a movie script about dog in moon\"\npraisonai --framework autogen\n</code></pre>"},{"location":"tldr/#user-interface","title":"User Interface","text":"<pre><code># Install UI support\npip install \"praisonai[ui]\"\n\n# Set up environment\nexport OPENAI_API_KEY=\"Enter your API key\"\nchainlit create-secret\nexport CHAINLIT_AUTH_SECRET=xxxxxxxx\n\n# Run UI\npraisonai ui\n</code></pre>"},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#inbuild-tools","title":"Inbuild Tools","text":"<ul> <li>CodeDocsSearchTool</li> <li>CSVSearchTool</li> <li>DirectorySearchTool</li> <li>DirectoryReadTool</li> <li>DOCXSearchTool</li> <li>FileReadTool</li> <li>GithubSearchTool</li> <li>SerperDevTool</li> <li>TXTSearchTool</li> <li>JSONSearchTool</li> <li>MDXSearchTool</li> <li>PDFSearchTool</li> <li>PGSearchTool</li> <li>RagTool</li> <li>ScrapeElementFromWebsiteTool</li> <li>ScrapeWebsiteTool</li> <li>SeleniumScrapingTool</li> <li>WebsiteSearchTool</li> <li>XMLSearchTool</li> <li>YoutubeChannelSearchTool</li> <li>YoutubeVideoSearchTool</li> </ul>"},{"location":"tools/#example-usage","title":"Example Usage","text":"<pre><code>framework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - WebsiteSearchTool\n</code></pre>"},{"location":"train/","title":"PraisonAI Train","text":""},{"location":"train/#to-upload-to-huggingface","title":"To upload to Huggingface","text":"<pre><code>export HF_TOKEN=xxxxxxxxxxxxxx\n</code></pre>"},{"location":"train/#to-upload-to-ollamacom-linux","title":"To upload to ollama.com (Linux)","text":"<pre><code>sudo cat /usr/share/ollama/.ollama/id_ed25519.pub\n</code></pre> <p>Save the output from above to ollama.com --&gt; Ollama keys</p>"},{"location":"train/#run-praisonai-train","title":"RUN PraisonAI Train","text":"<pre><code>praisonai train \\\n    --model unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit \\\n    --dataset yahma/alpaca-cleaned \\\n    --hf mervinpraison/llama3.1-instruct \\\n    --ollama mervinpraison/llama3.1-instruct\n</code></pre> <p>Note: PraisonAI Train currently tested on Linux with 1 GPU. With pytorch-cuda=12.1</p>"},{"location":"train/#configyaml-example","title":"Config.yaml example","text":"<pre><code>ollama_save: \"true\"\nhuggingface_save: \"true\"\ntrain: \"true\"\n\nmodel_name: \"unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit\"\nhf_model_name: \"mervinpraison/llama-3.1-instruct\"\nollama_model: \"mervinpraison/llama3.1-instruct\"\nmodel_parameters: \"8b\"\n\ndataset:\n  - name: \"yahma/alpaca-cleaned\"\n    split_type: \"train\"\n    processing_func: \"format_prompts\"\n    rename:\n      input: \"input\"\n      output: \"output\"\n      instruction: \"instruction\"\n    filter_data: false\n    filter_column_value: \"id\"\n    filter_value: \"alpaca\"\n    num_samples: 20000\n\ndataset_text_field: \"text\"\ndataset_num_proc: 2\npacking: false\n\nmax_seq_length: 2048\nload_in_4bit: true\nlora_r: 16\nlora_target_modules: \n  - \"q_proj\"\n  - \"k_proj\"\n  - \"v_proj\"\n  - \"o_proj\"\n  - \"gate_proj\"\n  - \"up_proj\"\n  - \"down_proj\"\nlora_alpha: 16\nlora_dropout: 0\nlora_bias: \"none\"\nuse_gradient_checkpointing: \"unsloth\"\nrandom_state: 3407\nuse_rslora: false\nloftq_config: null\n\nper_device_train_batch_size: 2\ngradient_accumulation_steps: 2\nwarmup_steps: 5\nnum_train_epochs: 1\nmax_steps: 10\nlearning_rate: 2.0e-4\nlogging_steps: 1\noptim: \"adamw_8bit\"\nweight_decay: 0.01\nlr_scheduler_type: \"linear\"\nseed: 3407\noutput_dir: \"outputs\"\n\nquantization_method: \n  - \"q4_k_m\"\n</code></pre> <pre><code>praisonai train\n</code></pre>"},{"location":"developers/agents-playbook/","title":"Agents Playbook","text":""},{"location":"developers/agents-playbook/#simple-playbook-example","title":"Simple Playbook Example","text":"<pre><code>framework: crewai\ntopic: Artificial Intelligence\nroles:\n  screenwriter:\n    backstory: 'Skilled in crafting scripts with engaging dialogue about {topic}.'\n    goal: Create scripts from concepts.\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Develop scripts with compelling characters and dialogue about {topic}.'\n        expected_output: 'Complete script ready for production.'\n</code></pre>"},{"location":"developers/agents-playbook/#detailed-playbook-example","title":"Detailed Playbook Example","text":"<pre><code>framework: crewai\ntopic: Artificial Intelligence\nroles:\n  movie_concept_creator:\n    backstory: 'Creative thinker with a deep understanding of cinematic storytelling,\n      capable of using AI-generated storylines to create unique and compelling movie\n      ideas.'\n    goal: Generate engaging movie concepts using AI storylines\n    role: Movie Concept Creator\n    tasks:\n      movie_concept_development:\n        description: 'Develop movie concepts from AI-generated storylines, ensuring\n          they are engaging and have strong narrative arcs.'\n        expected_output: 'Well-structured movie concept document with character\n          bios, settings, and plot outlines.'\n  screenwriter:\n    backstory: 'Expert in writing engaging dialogue and script structure, able to\n      turn movie concepts into production-ready scripts.'\n    goal: Write compelling scripts based on movie concepts\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Turn movie concepts into polished scripts with well-developed\n          characters, strong dialogue, and effective scene transitions.'\n        expected_output: 'Production-ready script with a beginning, middle, and\n          end, along with character development and engaging dialogues.'\n  editor:\n    backstory: 'Adept at identifying inconsistencies, improving language usage,\n      and maintaining the overall flow of the script.'\n    goal: Refine the scripts and ensure continuity of the movie storyline\n    role: Editor\n    tasks:\n      editing_task:\n        description: 'Review, edit, and refine the scripts to ensure they are cohesive\n          and follow a well-structured narrative.'\n        expected_output: 'A polished final draft of the script with no inconsistencies,\n          strong character development, and effective dialogue.'\ndependencies: []\n</code></pre>"},{"location":"developers/googlecolab-tools/","title":"Google Colab Tools","text":"<pre><code>!pip install -Uq praisonai duckduckgo_search\n</code></pre> <pre><code>from duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n</code></pre> <pre><code>import os\nimport yaml\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Example agent_yaml content\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Space Exploration\"\n\nroles:\n  astronomer:\n    role: \"Space Researcher\"\n    goal: \"Discover new insights about {topic}\"\n    backstory: \"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\"\n    tasks:\n      investigate_exoplanets:\n        description: \"Research and compile information about exoplanets discovered in the last decade.\"\n        expected_output: \"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\"\n    tools:\n      - \"InternetSearchTool\"\n\"\"\"\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side \ud83d\udd11 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n</code></pre> <pre><code> [2024-07-03 04:53:48][DEBUG]: == Working Agent: Space Researcher\n [2024-07-03 04:53:48][INFO]: == Starting Task: Research and compile information about exoplanets discovered in the last decade.\n\n\n&gt; Entering new CrewAgentExecutor chain...\nI now can give a great answer.\n\nFinal Answer:\n\nOver the last decade, the field of exoplanet research has experienced significant advancements, leading to the discovery of thousands of exoplanets. These discoveries have been made possible through missions like NASA's Kepler and TESS (Transiting Exoplanet Survey Satellite), as well as ground-based observatories. Here is a summarized report on some of the notable exoplanet discoveries, including their size, potential habitability, and distance from Earth:\n\n1. **Kepler-452b**\n   - **Size**: Approximately 1.6 times the radius of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, where liquid water could exist. It is often referred to as Earth's \"cousin.\"\n   - **Distance from Earth**: About 1,400 light-years\n\n2. **Proxima Centauri b**\n   - **Size**: About 1.17 times the mass of Earth\n   - **Potential Habitability**: Located in the habitable zone of Proxima Centauri, the closest star to the Sun. It has the potential to have liquid water.\n   - **Distance from Earth**: 4.24 light-years\n\n3. **TRAPPIST-1 System**\n   - **Size**: The system includes seven Earth-sized planets\n   - **Potential Habitability**: Three of the planets (TRAPPIST-1e, TRAPPIST-1f, and TRAPPIST-1g) are located in the habitable zone and could potentially support liquid water.\n   - **Distance from Earth**: Approximately 39 light-years\n\n4. **LHS 1140b**\n   - **Size**: About 1.4 times the size of Earth and 6.6 times its mass\n   - **Potential Habitability**: Located in the habitable zone of its star. It has a thick atmosphere and conditions that could support life.\n   - **Distance from Earth**: About 40 light-years\n\n5. **Kepler-186f**\n   - **Size**: Similar to Earth in size\n   - **Potential Habitability**: The first Earth-sized planet discovered in the habitable zone of another star. It has potential for liquid water on its surface.\n   - **Distance from Earth**: About 500 light-years\n\n6. **K2-18b**\n   - **Size**: Approximately 2.6 times the radius of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, with evidence of water vapor in its atmosphere.\n   - **Distance from Earth**: About 124 light-years\n\n7. **GJ 357 d**\n   - **Size**: About 6.1 times the mass of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, with the potential to have liquid water on its surface.\n   - **Distance from Earth**: About 31 light-years\n\nThese discoveries highlight the diversity of exoplanets in terms of size, composition, and potential habitability. The search for exoplanets is crucial for understanding the potential for life beyond Earth and the formation and evolution of planetary systems. Ongoing and future missions, such as the James Webb Space Telescope, are expected to provide even more detailed information about these distant worlds.\n\nThe continuous exploration and study of exoplanets will undoubtedly lead to new insights and perhaps even the discovery of life beyond our solar system.\n\n\n\n&gt; Finished chain.\n [2024-07-03 04:53:58][DEBUG]: == [Space Researcher] Task output: Over the last decade, the field of exoplanet research has experienced significant advancements, leading to the discovery of thousands of exoplanets. These discoveries have been made possible through missions like NASA's Kepler and TESS (Transiting Exoplanet Survey Satellite), as well as ground-based observatories. Here is a summarized report on some of the notable exoplanet discoveries, including their size, potential habitability, and distance from Earth:\n\n1. **Kepler-452b**\n   - **Size**: Approximately 1.6 times the radius of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, where liquid water could exist. It is often referred to as Earth's \"cousin.\"\n   - **Distance from Earth**: About 1,400 light-years\n\n2. **Proxima Centauri b**\n   - **Size**: About 1.17 times the mass of Earth\n   - **Potential Habitability**: Located in the habitable zone of Proxima Centauri, the closest star to the Sun. It has the potential to have liquid water.\n   - **Distance from Earth**: 4.24 light-years\n\n3. **TRAPPIST-1 System**\n   - **Size**: The system includes seven Earth-sized planets\n   - **Potential Habitability**: Three of the planets (TRAPPIST-1e, TRAPPIST-1f, and TRAPPIST-1g) are located in the habitable zone and could potentially support liquid water.\n   - **Distance from Earth**: Approximately 39 light-years\n\n4. **LHS 1140b**\n   - **Size**: About 1.4 times the size of Earth and 6.6 times its mass\n   - **Potential Habitability**: Located in the habitable zone of its star. It has a thick atmosphere and conditions that could support life.\n   - **Distance from Earth**: About 40 light-years\n\n5. **Kepler-186f**\n   - **Size**: Similar to Earth in size\n   - **Potential Habitability**: The first Earth-sized planet discovered in the habitable zone of another star. It has potential for liquid water on its surface.\n   - **Distance from Earth**: About 500 light-years\n\n6. **K2-18b**\n   - **Size**: Approximately 2.6 times the radius of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, with evidence of water vapor in its atmosphere.\n   - **Distance from Earth**: About 124 light-years\n\n7. **GJ 357 d**\n   - **Size**: About 6.1 times the mass of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, with the potential to have liquid water on its surface.\n   - **Distance from Earth**: About 31 light-years\n\nThese discoveries highlight the diversity of exoplanets in terms of size, composition, and potential habitability. The search for exoplanets is crucial for understanding the potential for life beyond Earth and the formation and evolution of planetary systems. Ongoing and future missions, such as the James Webb Space Telescope, are expected to provide even more detailed information about these distant worlds.\n\nThe continuous exploration and study of exoplanets will undoubtedly lead to new insights and perhaps even the discovery of life beyond our solar system.\n\n\n### Task Output ###\nOver the last decade, the field of exoplanet research has experienced significant advancements, leading to the discovery of thousands of exoplanets. These discoveries have been made possible through missions like NASA's Kepler and TESS (Transiting Exoplanet Survey Satellite), as well as ground-based observatories. Here is a summarized report on some of the notable exoplanet discoveries, including their size, potential habitability, and distance from Earth:\n\n1. **Kepler-452b**\n   - **Size**: Approximately 1.6 times the radius of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, where liquid water could exist. It is often referred to as Earth's \"cousin.\"\n   - **Distance from Earth**: About 1,400 light-years\n\n2. **Proxima Centauri b**\n   - **Size**: About 1.17 times the mass of Earth\n   - **Potential Habitability**: Located in the habitable zone of Proxima Centauri, the closest star to the Sun. It has the potential to have liquid water.\n   - **Distance from Earth**: 4.24 light-years\n\n3. **TRAPPIST-1 System**\n   - **Size**: The system includes seven Earth-sized planets\n   - **Potential Habitability**: Three of the planets (TRAPPIST-1e, TRAPPIST-1f, and TRAPPIST-1g) are located in the habitable zone and could potentially support liquid water.\n   - **Distance from Earth**: Approximately 39 light-years\n\n4. **LHS 1140b**\n   - **Size**: About 1.4 times the size of Earth and 6.6 times its mass\n   - **Potential Habitability**: Located in the habitable zone of its star. It has a thick atmosphere and conditions that could support life.\n   - **Distance from Earth**: About 40 light-years\n\n5. **Kepler-186f**\n   - **Size**: Similar to Earth in size\n   - **Potential Habitability**: The first Earth-sized planet discovered in the habitable zone of another star. It has potential for liquid water on its surface.\n   - **Distance from Earth**: About 500 light-years\n\n6. **K2-18b**\n   - **Size**: Approximately 2.6 times the radius of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, with evidence of water vapor in its atmosphere.\n   - **Distance from Earth**: About 124 light-years\n\n7. **GJ 357 d**\n   - **Size**: About 6.1 times the mass of Earth\n   - **Potential Habitability**: Located in the habitable zone of its star, with the potential to have liquid water on its surface.\n   - **Distance from Earth**: About 31 light-years\n\nThese discoveries highlight the diversity of exoplanets in terms of size, composition, and potential habitability. The search for exoplanets is crucial for understanding the potential for life beyond Earth and the formation and evolution of planetary systems. Ongoing and future missions, such as the James Webb Space Telescope, are expected to provide even more detailed information about these distant worlds.\n\nThe continuous exploration and study of exoplanets will undoubtedly lead to new insights and perhaps even the discovery of life beyond our solar system.\n</code></pre> <p>::: :::</p>"},{"location":"developers/googlecolab/","title":"Google Colab","text":"<pre><code>!pip install -Uq praisonai\n</code></pre> <pre><code>import os\nimport yaml\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Example agent_yaml content\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Space Exploration\"\n\nroles:\n  astronomer:\n    role: \"Space Researcher\"\n    goal: \"Discover new insights about {topic}\"\n    backstory: \"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\"\n    tasks:\n      investigate_exoplanets:\n        description: \"Research and compile information about exoplanets discovered in the last decade.\"\n        expected_output: \"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\"\n\"\"\"\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side \ud83d\udd11 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n</code></pre> <pre><code> [2024-07-03 04:39:09][DEBUG]: == Working Agent: Space Researcher\n [2024-07-03 04:39:09][INFO]: == Starting Task: Research and compile information about exoplanets discovered in the last decade.\n\n\n&gt; Entering new CrewAgentExecutor chain...\nI now can give a great answer.\n\nFinal Answer:\n\nIn the last decade, the field of exoplanet research has experienced a remarkable surge in discoveries, thanks to advancements in technology and dedicated space missions such as Kepler, TESS (Transiting Exoplanet Survey Satellite), and various ground-based observatories. Here is a summarized report on some of the notable exoplanet discoveries, highlighting their size, potential habitability, and distance from Earth:\n\n1. **Kepler-452b**\n   - **Size:** Approximately 60% larger in diameter than Earth.\n   - **Potential Habitability:** Often referred to as \"Earth's Cousin,\" Kepler-452b orbits within the habitable zone of its star, where liquid water could exist. The planet receives a similar amount of energy from its star as Earth does from the Sun.\n   - **Distance from Earth:** About 1,402 light-years.\n\n2. **Proxima Centauri b**\n   - **Size:** Slightly larger than Earth, with a minimum mass of 1.17 Earth masses.\n   - **Potential Habitability:** Located in the habitable zone of Proxima Centauri, the closest known star to the Sun. Potential for liquid water exists, but its habitability is uncertain due to stellar flare activity.\n   - **Distance from Earth:** 4.24 light-years.\n\n3. **TRAPPIST-1 System**\n   - **Size:** The system contains seven Earth-sized planets. TRAPPIST-1e, f, and g are within the star's habitable zone.\n   - **Potential Habitability:** TRAPPIST-1e is considered the most promising candidate for habitability, as it has a rocky composition and is located in the middle of the habitable zone.\n   - **Distance from Earth:** About 39 light-years.\n\n4. **LHS 1140 b**\n   - **Size:** About 1.4 times the size of Earth with a mass of around 6.6 Earth masses.\n   - **Potential Habitability:** Resides in the habitable zone of its red dwarf star. The planet is likely rocky and has an atmosphere that could support life.\n   - **Distance from Earth:** Approximately 40 light-years.\n\n5. **K2-18b**\n   - **Size:** About 2.6 times the size of Earth with a mass of 8.6 Earth masses.\n   - **Potential Habitability:** This exoplanet lies within the habitable zone and has been detected to have water vapor in its atmosphere. It is considered one of the most promising candidates for habitability outside our solar system.\n   - **Distance from Earth:** Roughly 124 light-years.\n\n6. **Gliese 667 Cc**\n   - **Size:** At least 4.5 times the mass of Earth.\n   - **Potential Habitability:** Orbits within the habitable zone of its host star, Gliese 667 C. Its orbit allows for the possibility of liquid water on its surface.\n   - **Distance from Earth:** About 23.62 light-years.\n\n7. **HD 40307 g**\n   - **Size:** A super-Earth with at least 7 Earth masses.\n   - **Potential Habitability:** Located in the habitable zone of its star, this planet could potentially support liquid water and therefore life.\n   - **Distance from Earth:** Approximately 42 light-years.\n\n8. **Ross 128 b**\n   - **Size:** Similar to Earth, with a minimum mass of 1.35 Earth masses.\n   - **Potential Habitability:** Orbits within the habitable zone of the relatively quiet red dwarf star Ross 128. The planet has mild temperatures that could allow for liquid water.\n   - **Distance from Earth:** About 11 light-years.\n\n9. **Teegarden's Star b**\n   - **Size:** Comparable to Earth.\n   - **Potential Habitability:** Orbits within the habitable zone of Teegarden's Star, a cool red dwarf. Conditions could be suitable for liquid water.\n   - **Distance from Earth:** Approximately 12 light-years.\n\n10. **Barnard's Star b**\n    - **Size:** A super-Earth with a mass of about 3.2 Earth masses.\n    - **Potential Habitability:** Located just outside the traditional habitable zone, but still within a range where liquid water could exist under certain conditions.\n    - **Distance from Earth:** About 6 light-years.\n\nThese discoveries highlight the diverse and intriguing nature of exoplanets found in the last decade. Each of these planets adds valuable information to our understanding of planetary formation, potential habitability, and the search for extraterrestrial life. Continued advancements in detection methods and technologies promise to further expand our knowledge in the years to come.\n\n&gt; Finished chain.\n [2024-07-03 04:39:25][DEBUG]: == [Space Researcher] Task output: In the last decade, the field of exoplanet research has experienced a remarkable surge in discoveries, thanks to advancements in technology and dedicated space missions such as Kepler, TESS (Transiting Exoplanet Survey Satellite), and various ground-based observatories. Here is a summarized report on some of the notable exoplanet discoveries, highlighting their size, potential habitability, and distance from Earth:\n\n1. **Kepler-452b**\n   - **Size:** Approximately 60% larger in diameter than Earth.\n   - **Potential Habitability:** Often referred to as \"Earth's Cousin,\" Kepler-452b orbits within the habitable zone of its star, where liquid water could exist. The planet receives a similar amount of energy from its star as Earth does from the Sun.\n   - **Distance from Earth:** About 1,402 light-years.\n\n2. **Proxima Centauri b**\n   - **Size:** Slightly larger than Earth, with a minimum mass of 1.17 Earth masses.\n   - **Potential Habitability:** Located in the habitable zone of Proxima Centauri, the closest known star to the Sun. Potential for liquid water exists, but its habitability is uncertain due to stellar flare activity.\n   - **Distance from Earth:** 4.24 light-years.\n\n3. **TRAPPIST-1 System**\n   - **Size:** The system contains seven Earth-sized planets. TRAPPIST-1e, f, and g are within the star's habitable zone.\n   - **Potential Habitability:** TRAPPIST-1e is considered the most promising candidate for habitability, as it has a rocky composition and is located in the middle of the habitable zone.\n   - **Distance from Earth:** About 39 light-years.\n\n4. **LHS 1140 b**\n   - **Size:** About 1.4 times the size of Earth with a mass of around 6.6 Earth masses.\n   - **Potential Habitability:** Resides in the habitable zone of its red dwarf star. The planet is likely rocky and has an atmosphere that could support life.\n   - **Distance from Earth:** Approximately 40 light-years.\n\n5. **K2-18b**\n   - **Size:** About 2.6 times the size of Earth with a mass of 8.6 Earth masses.\n   - **Potential Habitability:** This exoplanet lies within the habitable zone and has been detected to have water vapor in its atmosphere. It is considered one of the most promising candidates for habitability outside our solar system.\n   - **Distance from Earth:** Roughly 124 light-years.\n\n6. **Gliese 667 Cc**\n   - **Size:** At least 4.5 times the mass of Earth.\n   - **Potential Habitability:** Orbits within the habitable zone of its host star, Gliese 667 C. Its orbit allows for the possibility of liquid water on its surface.\n   - **Distance from Earth:** About 23.62 light-years.\n\n7. **HD 40307 g**\n   - **Size:** A super-Earth with at least 7 Earth masses.\n   - **Potential Habitability:** Located in the habitable zone of its star, this planet could potentially support liquid water and therefore life.\n   - **Distance from Earth:** Approximately 42 light-years.\n\n8. **Ross 128 b**\n   - **Size:** Similar to Earth, with a minimum mass of 1.35 Earth masses.\n   - **Potential Habitability:** Orbits within the habitable zone of the relatively quiet red dwarf star Ross 128. The planet has mild temperatures that could allow for liquid water.\n   - **Distance from Earth:** About 11 light-years.\n\n9. **Teegarden's Star b**\n   - **Size:** Comparable to Earth.\n   - **Potential Habitability:** Orbits within the habitable zone of Teegarden's Star, a cool red dwarf. Conditions could be suitable for liquid water.\n   - **Distance from Earth:** Approximately 12 light-years.\n\n10. **Barnard's Star b**\n    - **Size:** A super-Earth with a mass of about 3.2 Earth masses.\n    - **Potential Habitability:** Located just outside the traditional habitable zone, but still within a range where liquid water could exist under certain conditions.\n    - **Distance from Earth:** About 6 light-years.\n\nThese discoveries highlight the diverse and intriguing nature of exoplanets found in the last decade. Each of these planets adds valuable information to our understanding of planetary formation, potential habitability, and the search for extraterrestrial life. Continued advancements in detection methods and technologies promise to further expand our knowledge in the years to come.\n\n\n### Task Output ###\nIn the last decade, the field of exoplanet research has experienced a remarkable surge in discoveries, thanks to advancements in technology and dedicated space missions such as Kepler, TESS (Transiting Exoplanet Survey Satellite), and various ground-based observatories. Here is a summarized report on some of the notable exoplanet discoveries, highlighting their size, potential habitability, and distance from Earth:\n\n1. **Kepler-452b**\n   - **Size:** Approximately 60% larger in diameter than Earth.\n   - **Potential Habitability:** Often referred to as \"Earth's Cousin,\" Kepler-452b orbits within the habitable zone of its star, where liquid water could exist. The planet receives a similar amount of energy from its star as Earth does from the Sun.\n   - **Distance from Earth:** About 1,402 light-years.\n\n2. **Proxima Centauri b**\n   - **Size:** Slightly larger than Earth, with a minimum mass of 1.17 Earth masses.\n   - **Potential Habitability:** Located in the habitable zone of Proxima Centauri, the closest known star to the Sun. Potential for liquid water exists, but its habitability is uncertain due to stellar flare activity.\n   - **Distance from Earth:** 4.24 light-years.\n\n3. **TRAPPIST-1 System**\n   - **Size:** The system contains seven Earth-sized planets. TRAPPIST-1e, f, and g are within the star's habitable zone.\n   - **Potential Habitability:** TRAPPIST-1e is considered the most promising candidate for habitability, as it has a rocky composition and is located in the middle of the habitable zone.\n   - **Distance from Earth:** About 39 light-years.\n\n4. **LHS 1140 b**\n   - **Size:** About 1.4 times the size of Earth with a mass of around 6.6 Earth masses.\n   - **Potential Habitability:** Resides in the habitable zone of its red dwarf star. The planet is likely rocky and has an atmosphere that could support life.\n   - **Distance from Earth:** Approximately 40 light-years.\n\n5. **K2-18b**\n   - **Size:** About 2.6 times the size of Earth with a mass of 8.6 Earth masses.\n   - **Potential Habitability:** This exoplanet lies within the habitable zone and has been detected to have water vapor in its atmosphere. It is considered one of the most promising candidates for habitability outside our solar system.\n   - **Distance from Earth:** Roughly 124 light-years.\n\n6. **Gliese 667 Cc**\n   - **Size:** At least 4.5 times the mass of Earth.\n   - **Potential Habitability:** Orbits within the habitable zone of its host star, Gliese 667 C. Its orbit allows for the possibility of liquid water on its surface.\n   - **Distance from Earth:** About 23.62 light-years.\n\n7. **HD 40307 g**\n   - **Size:** A super-Earth with at least 7 Earth masses.\n   - **Potential Habitability:** Located in the habitable zone of its star, this planet could potentially support liquid water and therefore life.\n   - **Distance from Earth:** Approximately 42 light-years.\n\n8. **Ross 128 b**\n   - **Size:** Similar to Earth, with a minimum mass of 1.35 Earth masses.\n   - **Potential Habitability:** Orbits within the habitable zone of the relatively quiet red dwarf star Ross 128. The planet has mild temperatures that could allow for liquid water.\n   - **Distance from Earth:** About 11 light-years.\n\n9. **Teegarden's Star b**\n   - **Size:** Comparable to Earth.\n   - **Potential Habitability:** Orbits within the habitable zone of Teegarden's Star, a cool red dwarf. Conditions could be suitable for liquid water.\n   - **Distance from Earth:** Approximately 12 light-years.\n\n10. **Barnard's Star b**\n    - **Size:** A super-Earth with a mass of about 3.2 Earth masses.\n    - **Potential Habitability:** Located just outside the traditional habitable zone, but still within a range where liquid water could exist under certain conditions.\n    - **Distance from Earth:** About 6 light-years.\n\nThese discoveries highlight the diverse and intriguing nature of exoplanets found in the last decade. Each of these planets adds valuable information to our understanding of planetary formation, potential habitability, and the search for extraterrestrial life. Continued advancements in detection methods and technologies promise to further expand our knowledge in the years to come.\n</code></pre>"},{"location":"developers/test/","title":"Test","text":"<pre><code>python -m unittest tests.test \n</code></pre>"},{"location":"developers/wrapper-tools/","title":"Integrate with Tools","text":"<pre><code>from praisonai import PraisonAI\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\n# Example agent_yaml content\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Space Exploration\"\n\nroles:\n  astronomer:\n    role: \"Space Researcher\"\n    goal: \"Discover new insights about {topic}\"\n    backstory: \"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\"\n    tasks:\n      investigate_exoplanets:\n        description: \"Research and compile information about exoplanets discovered in the last decade.\"\n        expected_output: \"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\"\n    tools:\n      - \"InternetSearchTool\"\n\"\"\"\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"developers/wrapper/","title":"Include praisonai package in your project","text":""},{"location":"developers/wrapper/#option-1-using-raw-yaml","title":"Option 1: Using RAW YAML","text":"<pre><code>from praisonai import PraisonAI\n\n# Example agent_yaml content\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Space Exploration\"\n\nroles:\n  astronomer:\n    role: \"Space Researcher\"\n    goal: \"Discover new insights about {topic}\"\n    backstory: \"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\"\n    tasks:\n      investigate_exoplanets:\n        description: \"Research and compile information about exoplanets discovered in the last decade.\"\n        expected_output: \"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\"\n\"\"\"\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"developers/wrapper/#option-2-using-separate-agentsyaml-file","title":"Option 2: Using separate agents.yaml file","text":"<p>Note: Please create agents.yaml file before hand. </p> <pre><code>from praisonai import PraisonAI\n\ndef basic(): # Basic Mode\n    praisonai = PraisonAI(agent_file=\"agents.yaml\")\n    praisonai.run()\n\nif __name__ == \"__main__\":\n    basic()\n</code></pre>"},{"location":"developers/wrapper/#other-options","title":"Other options","text":"<pre><code>from praisonai import PraisonAI\n\ndef basic(): # Basic Mode\n    praisonai = PraisonAI(agent_file=\"agents.yaml\")\n    praisonai.run()\n\ndef advanced(): # Advanced Mode with options\n    praisonai = PraisonAI(\n        agent_file=\"agents.yaml\",\n        framework=\"autogen\",\n    )\n    praisonai.run()\n\ndef auto(): # Full Automatic Mode\n    praisonai = PraisonAI(\n        auto=\"Create a movie script about car in mars\",\n        framework=\"autogen\"\n    )\n    print(praisonai.framework)\n    praisonai.run()\n\nif __name__ == \"__main__\":\n    basic()\n    advanced()\n    auto()\n</code></pre>"},{"location":"framework/autogen/","title":"AutoGen with PraisonAI","text":"<p>Low-code solution to run AutoGen with integrated tools and features.</p>"},{"location":"framework/autogen/#installation","title":"Installation","text":"<pre><code># Install with AutoGen support\npip install \"praisonai[autogen]\"\n</code></pre> <p>This installation includes: - AutoGen framework - PraisonAI tools integration - Multi-agent conversation capabilities - Code execution environment</p>"},{"location":"framework/autogen/#quick-start","title":"Quick Start","text":"<pre><code># Set your OpenAI API key\nexport OPENAI_API_KEY=xxxxxxxxxx\n\n# Initialize with AutoGen\npraisonai --framework autogen --init \"Create a Movie Script About Cat in Mars\"\n\n# Run the agents\npraisonai --framework autogen\n</code></pre>"},{"location":"framework/autogen/#auto-mode","title":"Auto Mode","text":"<pre><code>praisonai --framework autogen --auto \"Create a Movie Script About Cat in Mars\"\n</code></pre>"},{"location":"framework/crewai/","title":"CrewAI with PraisonAI","text":"<p>Low-code solution to run CrewAI with integrated tools and features.</p>"},{"location":"framework/crewai/#installation","title":"Installation","text":"<pre><code># Install with CrewAI support\npip install \"praisonai[crewai]\"\n</code></pre> <p>This installation includes: - CrewAI framework - PraisonAI tools integration - Task delegation capabilities - Sequential and parallel task execution</p>"},{"location":"framework/crewai/#quick-start","title":"Quick Start","text":"<pre><code># Set your OpenAI API key\nexport OPENAI_API_KEY=xxxxxxxxxx\n\n# Initialize with CrewAI\npraisonai --framework crewai --init \"Create a Movie Script About Cat in Mars\"\n\n# Run the agents\npraisonai --framework crewai\n</code></pre>"},{"location":"framework/crewai/#auto-mode","title":"Auto Mode","text":"<pre><code>praisonai --framework crewai --auto \"Create a Movie Script About Cat in Mars\"\n</code></pre>"},{"location":"models/anthropic/","title":"Add Anthropic to Praison AI","text":"<p><pre><code>pip install langchain-anthropic\n</code></pre> <pre><code>export ANTHROPIC_API_KEY=xxxxxxxxxx\n</code></pre></p>"},{"location":"models/anthropic/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"anthropic/claude-3-haiku-20240307\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/cohere/","title":"Add COHERE to Praison AI","text":"<p><pre><code>pip install langchain-cohere\n</code></pre> <pre><code>export COHERE_API_KEY=xxxxxxxxxx\n</code></pre></p>"},{"location":"models/cohere/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"cohere/command-r\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/google/","title":"Add Google Gemini to Praison AI","text":"<p><pre><code>pip install langchain-google-genai\n</code></pre> <pre><code>export GOOGLE_API_KEY=xxxxxxxxxx\n</code></pre></p>"},{"location":"models/google/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"google/gemini-1.5-flash-001\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/groq/","title":"Add GROQ to Praison AI","text":"<pre><code>export GROQ_API_KEY=xxxxxxxxxx\n</code></pre>"},{"location":"models/groq/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"groq/llama3-70b-8192\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/mistral/","title":"Add Mistral to Praison AI","text":"<p>Note: If you want to use Mistral via Ollama, please refer to Ollama document. This is for using Mistral from https://mistral.ai </p>"},{"location":"models/mistral/#using-single-agent","title":"Using Single Agent","text":"<pre><code>export OPENAI_API_KEY=xxxxxxxxxx\nexport OPENAI_MODEL_NAME=mistral-large\nexport OPENAI_API_BASE=\"https://api.mistral.ai/v1\"\n</code></pre>"},{"location":"models/mistral/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/ollama/","title":"Add Ollama to Praison AI","text":""},{"location":"models/ollama/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"ollama/llama3\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/openai/","title":"Add OPENAI ChatGPT to Praison AI","text":""},{"location":"models/openai/#using-single-agent","title":"Using Single Agent","text":"<pre><code>export OPENAI_API_KEY=xxxxxxxxxx\nexport OPENAI_MODEL_NAME=gpt-4o\n</code></pre>"},{"location":"models/openai/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> <p>You can also mention the model name in the agents.yaml file</p>"},{"location":"models/openai/#agentsyaml-file_1","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"gpt-4o\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre>"},{"location":"models/openai/#using-multi-agents","title":"Using Multi Agents","text":"<p><pre><code>pip install langchain-openai\n</code></pre> <pre><code>export OPENAI_API_KEY=xxxxxxxxxx\n</code></pre></p>"},{"location":"models/openai/#agentsyaml-file_2","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"openai/gpt-4o\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/openrouter/","title":"Add OpenRouter to Praison AI","text":"<pre><code>export OPENROUTER_API_KEY=xxxxxxxxxx\n</code></pre>"},{"location":"models/openrouter/#agentsyaml-file","title":"agents.yaml file","text":"<pre><code>framework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"openrouter/anthropic/claude-3.5-sonnet\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"models/other/","title":"Other Models","text":"<pre><code># Ollama\nOPENAI_API_BASE='http://localhost:11434/v1'\nOPENAI_MODEL_NAME='mistral'\nOPENAI_API_KEY='NA'\n\n# FastChat\nOPENAI_API_BASE=\"http://localhost:8001/v1\"\nOPENAI_MODEL_NAME='oh-2.5m7b-q51'\nOPENAI_API_KEY=NA\n\n# LM Studio\nOPENAI_API_BASE=\"http://localhost:1234/v1\"\nOPENAI_MODEL_NAME=NA\nOPENAI_API_KEY=NA\n\n# Mistral API\nOPENAI_API_BASE=https://api.mistral.ai/v1\nOPENAI_MODEL_NAME=\"mistral-small\"\nOPENAI_API_KEY=your-mistral-api-key\n</code></pre> PraisonAI Chat PraisonAI Code PraisonAI (Multi-Agents) Litellm Litellm Models"},{"location":"monitoring/agentops/","title":"AgentOps PraisonAI Monitoring","text":"<pre><code>pip install \"praisonai[agentops]\"\n</code></pre> <pre><code>export AGENTOPS_API_KEY=xxxxxxxx\n</code></pre>"},{"location":"monitoring/agentops/#dashboard","title":"Dashboard","text":""},{"location":"tools/composio/","title":"Composio PraisonAI Integration","text":"<p>Composio allows AI agents and LLMs to easily integrate with 100+ tools (GitHub, Gmail, CodeExecution and more) to perform actions and subscribe to triggers. This example will show how to integrate Composio with PraisonAI agents to let them seamlessly interact with external apps.</p> <pre><code>pip install composio-praisonai\n</code></pre> <p>To add Composio's Serpapi tool - </p> <pre><code>composio add serpapi\n</code></pre> <pre><code>from praisonai import PraisonAI\nfrom composio_praisonai import Action, ComposioToolSet\n\n# Initialize Composio's Toolset\ncomposio_toolset = ComposioToolSet()\n\n# Get the SERPAPI tool\ntools = composio_toolset.get_tools(actions=[Action.SERPAPI_SEARCH])\n\n# Get the tool string for agent_yaml\ntool_section_str = composio_toolset.get_tools_section(tools)\n\n# Example configuration\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Research\"\n\nroles:\n  researcher:\n    role: \"Researcher\"\n    goal: \"Search the internet for the information requested\"\n    backstory: \"A researcher tasked with finding and analyzing information on various topics using available tools.\"\n    tasks:\n      research_task:\n        description: \"Research about open source LLMs vs closed source LLMs.\"\n        expected_output: \"A full analysis report on the topic.\"\n\"\"\" + tool_section_str\n\n# Create PraisonAI instance with the agent_yaml content\npraison_ai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praison_ai.main()\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"tools/crawl4ai/","title":"Crawl4AI Praison AI Integration","text":""},{"location":"tools/crawl4ai/#install","title":"Install","text":"<pre><code>pip install \"crawl4ai @ git+https://github.com/unclecode/crawl4ai.git\" transformers torch nltk\n</code></pre> <pre><code>pip install praisonai\nexport OPENAI_API_KEY=xxxxxxxxx\n</code></pre>"},{"location":"tools/crawl4ai/#toolspy","title":"tools.py","text":"<pre><code>import os\nfrom crawl4ai import WebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token \u00dffor the OpenAI model.\")\n\nurl = 'https://openai.com/api/pricing/'\ncrawler = WebCrawler()\ncrawler.warmup()\n\nresult = crawler.run(\n        url=url,\n        word_count_threshold=1,\n        extraction_strategy= LLMExtractionStrategy(\n            provider= \"openai/gpt-4o\", api_token = os.getenv('OPENAI_API_KEY'), \n            schema=OpenAIModelFee.schema(),\n            extraction_type=\"schema\",\n            instruction=\"\"\"From the crawled content, extract all mentioned model names along with their fees for input and output tokens. \n            Do not miss any models in the entire content. One extracted model JSON format should look like this: \n            {\"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\"}.\"\"\"\n        ),            \n        bypass_cache=True,\n    )\n\nprint(result.extracted_content)\n</code></pre>"},{"location":"tools/crawl4ai/#agentsyaml","title":"agents.yaml","text":"<pre><code>framework: crewai\ntopic: extract model pricing from websites\nroles:\n  web_scraper:\n    backstory: An expert in web scraping with a deep understanding of extracting structured\n      data from online sources. https://openai.com/api/pricing/ https://www.anthropic.com/pricing https://cohere.com/pricing\n    goal: Gather model pricing data from various websites\n    role: Web Scraper\n    tasks:\n      scrape_model_pricing:\n        description: Scrape model pricing information from the provided list of websites.\n        expected_output: Raw HTML or JSON containing model pricing data.\n    tools:\n    - 'ModelFeeTool'\ndependencies: []\n</code></pre>"},{"location":"tools/crawl4ai/#run","title":"Run","text":"<pre><code>praisonai\n</code></pre>"},{"location":"tools/custom/","title":"Create Custom Tools","text":""},{"location":"tools/custom/#step-1-install-the-praisonai-package","title":"Step 1: Install the <code>praisonai</code> Package","text":"<p>First, you need to install the <code>praisonai</code> package. Open your terminal and run the following command:</p> <pre><code>pip install praisonai\n</code></pre>"},{"location":"tools/custom/#step-2-create-the-internetsearchtool","title":"Step 2: Create the <code>InternetSearchTool</code>","text":"<p>Next, create a file named <code>tools.py</code> and add the following code to define the <code>InternetSearchTool</code>:</p> <pre><code>from duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"Internet Search Tool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n</code></pre>"},{"location":"tools/custom/#step-3-define-the-agent-configuration","title":"Step 3: Define the Agent Configuration","text":"<p>Create a file named <code>agents.yaml</code> and add the following content to configure the agent:</p> <pre><code>framework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - InternetSearchTool\n</code></pre>"},{"location":"tools/custom/#step-4-run-the-praisonai-tool","title":"Step 4: Run the PraisonAI Tool","text":"<p>To run the PraisonAI tool, simply type the following command in your terminal:</p> <pre><code>praisonai\n</code></pre> <p>If you want to run the <code>autogen</code> framework, use:</p> <pre><code>praisonai --framework autogen\n</code></pre>"},{"location":"tools/custom/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the <code>duckduckgo_search</code> package installed. If not, you can install it using:</p> <pre><code>pip install duckduckgo_search\n</code></pre> <p>That's it! You should now have the PraisonAI tool installed and configured.</p>"},{"location":"tools/custom/#other-information","title":"Other information","text":""},{"location":"tools/custom/#tldr-to-create-a-custom-tool","title":"TL;DR to Create a Custom Tool","text":"<pre><code>pip install praisonai duckduckgo-search\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --init research about the latest AI News and prepare a detailed report\n</code></pre> <ul> <li>Add <code>- InternetSearchTool</code> in the agents.yaml file in the tools section. </li> <li>Create a file called tools.py and add this code tools.py</li> </ul> <pre><code>praisonai\n</code></pre>"},{"location":"tools/custom/#pre-requisite-to-create-a-custom-tool","title":"Pre-requisite to Create a Custom Tool","text":"<p><code>agents.yaml</code> file should be present in the current directory. </p> <p>If it doesn't exist, create it by running the command <code>praisonai --init research about the latest AI News and prepare a detailed report</code>.</p>"},{"location":"tools/custom/#step-1-to-create-a-custom-tool","title":"Step 1 to Create a Custom Tool","text":"<p>Create a file called tools.py in the same directory as the agents.yaml file.</p> <pre><code># example tools.py\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n</code></pre>"},{"location":"tools/custom/#step-2-to-create-a-custom-tool","title":"Step 2 to Create a Custom Tool","text":"<p>Add the tool to the agents.yaml file as show below under the tools section <code>- InternetSearchTool</code>.</p> <pre><code>framework: crewai\ntopic: research about the latest AI News and prepare a detailed report\nroles:\n  research_analyst:\n    backstory: Experienced in gathering and analyzing data related to AI news trends.\n    goal: Analyze AI News trends\n    role: Research Analyst\n    tasks:\n      gather_data:\n        description: Conduct in-depth research on the latest AI News trends from reputable\n          sources.\n        expected_output: Comprehensive report on current AI News trends.\n    tools:\n    - InternetSearchTool\n</code></pre>"},{"location":"tools/duckduckgo/","title":"DuckDuckGo Praison AI Integration","text":"<pre><code>pip install duckduckgo_search\n</code></pre> <p>Create a file called tools.py in the same directory as the agents.yaml file.</p> <pre><code># example tools.py\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n</code></pre>"},{"location":"tools/googlecalendar/","title":"Google Calendar Tools","text":""},{"location":"tools/googlecalendar/#manage-google-calendar-events","title":"Manage Google Calendar Events","text":"<ol> <li>Create a file called <code>tools.py</code></li> <li> <p>Add the following code: <pre><code>from google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom google.auth.transport.requests import Request\nfrom google_auth_oauthlib.flow import Flow\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nimport os\nimport json\nimport webbrowser\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs\nimport threading\nfrom datetime import datetime, timedelta\nimport logging\n\n# Set up logging\nlog_level = os.getenv('LOGLEVEL', 'INFO').upper()\nlogging.basicConfig(level=log_level)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(log_level)\n\n# Set up Google Calendar API\nSCOPES = ['https://www.googleapis.com/auth/calendar']\n\ndef get_calendar_service():\n    logger.debug(\"Getting calendar service\")\n    creds = None\n    token_dir = os.path.join(os.path.expanduser('~'), '.praison')\n    token_path = os.path.join(token_dir, 'token.json')\n    credentials_path = os.path.join(os.getcwd(), 'credentials.json')\n\n    if os.path.exists(token_path):\n        creds = Credentials.from_authorized_user_file(token_path, SCOPES)\n        logger.debug(f\"Credentials loaded from {token_path}\")\n\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            logger.debug(f\"Refreshing credentials\")\n            creds.refresh(Request())\n        else:\n            logger.debug(f\"Starting new OAuth 2.0 flow\")\n            flow = InstalledAppFlow.from_client_secrets_file(credentials_path, SCOPES)\n            logger.debug(f\"Credentials path: {credentials_path}\")\n            creds = flow.run_local_server(port=8090)\n            logger.debug(f\"Setting up flow from {credentials_path}\")\n            # creds = flow.run_local_server(port=8090)  # Use run_local_server from InstalledAppFlow\n\n        # Ensure the ~/.praison directory exists\n        os.makedirs(os.path.dirname(token_path), exist_ok=True)\n        logger.debug(f\"Saving credentials to {token_path}\")\n        with open(token_path, 'w') as token:\n            token.write(creds.to_json())\n\n    logger.debug(\"Building calendar service\")\n    return build('calendar', 'v3', credentials=creds)\n\n\ncheck_calendar_def = {\n    \"name\": \"check_calendar\",\n    \"description\": \"Check Google Calendar for events within a specified time range\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"start_time\": {\"type\": \"string\", \"description\": \"Start time in ISO format (e.g., '2023-04-20T09:00:00-07:00')\"},\n            \"end_time\": {\"type\": \"string\", \"description\": \"End time in ISO format (e.g., '2023-04-20T17:00:00-07:00')\"}\n        },\n        \"required\": [\"start_time\", \"end_time\"]\n    }\n}\n\nasync def check_calendar_handler(start_time, end_time):\n    try:\n        service = get_calendar_service()\n        events_result = service.events().list(calendarId='primary', timeMin=start_time,\n                                              timeMax=end_time, singleEvents=True,\n                                              orderBy='startTime').execute()\n        events = events_result.get('items', [])\n        logger.debug(f\"Found {len(events)} events in the calendar\")\n        logger.debug(f\"Events: {events}\")\n        return json.dumps(events)\n    except Exception as e:\n        return {\"error\": str(e)}\n\ncheck_calendar = (check_calendar_def, check_calendar_handler)\n\nadd_calendar_event_def = {\n    \"name\": \"add_calendar_event\",\n    \"description\": \"Add a new event to Google Calendar\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"summary\": {\"type\": \"string\", \"description\": \"Event title\"},\n            \"start_time\": {\"type\": \"string\", \"description\": \"Start time in ISO format\"},\n            \"end_time\": {\"type\": \"string\", \"description\": \"End time in ISO format\"},\n            \"description\": {\"type\": \"string\", \"description\": \"Event description\"}\n        },\n        \"required\": [\"summary\", \"start_time\", \"end_time\"]\n    }\n}\n\nasync def add_calendar_event_handler(summary, start_time, end_time, description=\"\"):\n    try:\n        service = get_calendar_service()\n        event = {\n            'summary': summary,\n            'description': description,\n            'start': {'dateTime': start_time, 'timeZone': 'UTC'},\n            'end': {'dateTime': end_time, 'timeZone': 'UTC'},\n        }\n        event = service.events().insert(calendarId='primary', body=event).execute()\n        logger.debug(f\"Event added: {event}\")\n        return {\"status\": \"success\", \"event_id\": event['id']}\n    except Exception as e:\n        return {\"error\": str(e)}\n\nadd_calendar_event = (add_calendar_event_def, add_calendar_event_handler)\n\nlist_calendar_events_def = {\n    \"name\": \"list_calendar_events\",\n    \"description\": \"List Google Calendar events for a specific date\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"date\": {\"type\": \"string\", \"description\": \"Date in YYYY-MM-DD format\"}\n        },\n        \"required\": [\"date\"]\n    }\n}\n\nasync def list_calendar_events_handler(date):\n    try:\n        service = get_calendar_service()\n        start_of_day = f\"{date}T00:00:00Z\"\n        end_of_day = f\"{date}T23:59:59Z\"\n        events_result = service.events().list(calendarId='primary', timeMin=start_of_day,\n                                              timeMax=end_of_day, singleEvents=True,\n                                              orderBy='startTime').execute()\n        events = events_result.get('items', [])\n        logger.debug(f\"Found {len(events)} events in the calendar for {date}\")\n        logger.debug(f\"Events: {events}\")\n        return json.dumps(events)\n    except Exception as e:\n        return {\"error\": str(e)}\n\nlist_calendar_events = (list_calendar_events_def, list_calendar_events_handler)\n\nupdate_calendar_event_def = {\n    \"name\": \"update_calendar_event\",\n    \"description\": \"Update an existing Google Calendar event\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"event_id\": {\"type\": \"string\", \"description\": \"ID of the event to update\"},\n            \"summary\": {\"type\": \"string\", \"description\": \"New event title\"},\n            \"start_time\": {\"type\": \"string\", \"description\": \"New start time in ISO format\"},\n            \"end_time\": {\"type\": \"string\", \"description\": \"New end time in ISO format\"},\n            \"description\": {\"type\": \"string\", \"description\": \"New event description\"}\n        },\n        \"required\": [\"event_id\"]\n    }\n}\n\nasync def update_calendar_event_handler(event_id, summary=None, start_time=None, end_time=None, description=None):\n    try:\n        service = get_calendar_service()\n        event = service.events().get(calendarId='primary', eventId=event_id).execute()\n\n        if summary:\n            event['summary'] = summary\n        if description:\n            event['description'] = description\n        if start_time:\n            event['start'] = {'dateTime': start_time, 'timeZone': 'UTC'}\n        if end_time:\n            event['end'] = {'dateTime': end_time, 'timeZone': 'UTC'}\n\n        updated_event = service.events().update(calendarId='primary', eventId=event_id, body=event).execute()\n        logger.debug(f\"Event updated: {updated_event}\")\n        return {\"status\": \"success\", \"updated_event\": updated_event}\n    except Exception as e:\n        return {\"error\": str(e)}\n\nupdate_calendar_event = (update_calendar_event_def, update_calendar_event_handler)\n\ndelete_calendar_event_def = {\n    \"name\": \"delete_calendar_event\",\n    \"description\": \"Delete a Google Calendar event\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"event_id\": {\"type\": \"string\", \"description\": \"ID of the event to delete\"}\n        },\n        \"required\": [\"event_id\"]\n    }\n}\n\nasync def delete_calendar_event_handler(event_id):\n    try:\n        service = get_calendar_service()\n        service.events().delete(calendarId='primary', eventId=event_id).execute()\n        logger.debug(f\"Event deleted: {event_id}\")\n        return {\"status\": \"success\", \"message\": f\"Event with ID {event_id} has been deleted\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndelete_calendar_event = (delete_calendar_event_def, delete_calendar_event_handler)\n\ntools = [\n    check_calendar,\n    add_calendar_event,\n    list_calendar_events,\n    update_calendar_event,\n    delete_calendar_event,\n]\n</code></pre></p> </li> <li> <p>Download credentials.json from Google Cloud Console and place it in your project directory</p> </li> <li> <pre><code>pip install google-auth-oauthlib google-auth-httplib2 google-api-python-client\npip install \"praisonai[call]\"\nexport OPENAI_API_KEY=\"enter your openai api key here\"\nexport NGROK_AUTH_TOKEN=\"enter your ngrok auth token here\"\npraisonai call --public\n</code></pre> </li> </ol>"},{"location":"tools/gpt/","title":"PraisonAI Tools Creator GPT","text":"<p>Use PraisonAI Tools Creator GPT to get started quickly.</p>"},{"location":"tools/langchain/","title":"Langchain Tools","text":""},{"location":"tools/langchain/#integrate-langchain-direct-tools","title":"Integrate Langchain Direct Tools","text":"<pre><code>pip install youtube_search praisonai langchain_community langchain\n</code></pre> <pre><code># tools.py\nfrom langchain_community.tools import YouTubeSearchTool\n</code></pre> <pre><code># agents.yaml\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'YouTubeSearchTool'\n</code></pre>"},{"location":"tools/langchain/#integrate-langchain-with-wrappers","title":"Integrate Langchain with Wrappers","text":"<pre><code>pip install wikipedia langchain_community\n</code></pre> <pre><code># tools.py\nfrom langchain_community.utilities import WikipediaAPIWrapper\nclass WikipediaSearchTool(BaseTool):\n    name: str = \"WikipediaSearchTool\"\n    description: str = \"Search Wikipedia for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = WikipediaAPIWrapper(top_k_results=4, doc_content_chars_max=100)\n        results = api_wrapper.load(query=query)\n        return results\n</code></pre> <pre><code># agents.yaml\nframework: crewai\ntopic: research about nvidia growth\nroles:\n  data_collector:\n    backstory: An experienced researcher with the ability to efficiently collect and\n      organize vast amounts of data.\n    goal: Gather information on Nvidia's growth by providing the Ticket Symbol to YahooFinanceNewsTool\n    role: Data Collector\n    tasks:\n      data_collection_task:\n        description: Collect data on Nvidia's growth from various sources such as\n          financial reports, news articles, and company announcements.\n        expected_output: A comprehensive document detailing data points on Nvidia's\n          growth over the years.\n    tools:\n    - 'WikipediaSearchTool'\n</code></pre>"},{"location":"tools/mem0/","title":"Mem0 and PaisonAI Integration","text":"<p>Mem0 is a tools to store, updated, delete and retrieve memories. https://github.com/mem0ai/mem0</p>"},{"location":"tools/mem0/#mem0-previously-called-embedchain","title":"Mem0 previously called EmbedChain","text":"<pre><code>from mem0 import Memory\nfrom praisonai_tools import BaseTool\n\nclass AddMemoryTool(BaseTool):\n    name: str = \"Add Memory Tool\"\n    description: str = (\"This tool allows storing a new memory with user ID and optional metadata.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: text='I am working on improving my tennis skills. Suggest some online courses.', user_id='alice', metadata={'category': 'hobbies'}\\n\"\n                        \"   - Output: Memory added with summary 'Improving her tennis skills. Looking for online suggestions.'\")\n\n    def _run(self, text: str, user_id: str, metadata: dict = None):\n        m = Memory()\n        result = m.add(text, user_id=user_id, metadata=metadata)\n        return result\n\nclass GetAllMemoriesTool(BaseTool):\n    name: str = \"Get All Memories Tool\"\n    description: str = (\"This tool retrieves all stored memories.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: action='get_all'\\n\"\n                        \"   - Output: List of all stored memories.\")\n\n    def _run(self):\n        m = Memory()\n        result = m.get_all()\n        return result\n\nclass SearchMemoryTool(BaseTool):\n    name: str = \"Search Memory Tool\"\n    description: str = (\"This tool searches for specific memories based on a query and user ID.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: query='What are Alice's hobbies?', user_id='alice'\\n\"\n                        \"   - Output: Search results related to Alice's hobbies.\")\n\n    def _run(self, query: str, user_id: str):\n        m = Memory()\n        result = m.search(query=query, user_id=user_id)\n        return result\n\nclass UpdateMemoryTool(BaseTool):\n    name: str = \"Update Memory Tool\"\n    description: str = (\"This tool updates an existing memory by memory ID and new data.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: memory_id='cb032b42-0703-4b9c-954d-77c36abdd660', data='Likes to play tennis on weekends'\\n\"\n                        \"   - Output: Memory updated to 'Likes to play tennis on weekends.'\")\n\n    def _run(self, memory_id: str, data: str):\n        m = Memory()\n        result = m.update(memory_id=memory_id, data=data)\n        return result\n\nclass MemoryHistoryTool(BaseTool):\n    name: str = \"Memory History Tool\"\n    description: str = (\"This tool gets the history of changes made to a specific memory by memory ID.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: memory_id='cb032b42-0703-4b9c-954d-77c36abdd660'\\n\"\n                        \"   - Output: History of the specified memory.\")\n\n    def _run(self, memory_id: str):\n        m = Memory()\n        result = m.history(memory_id=memory_id)\n        return result\n</code></pre>"},{"location":"tools/reddit/","title":"Reddit PraisonAI Integration","text":"<pre><code>export REDDIT_USER_AGENT=[USER]\nexport REDDIT_CLIENT_SECRET=xxxxxx\nexport REDDIT_CLIENT_ID=xxxxxx\n</code></pre> <p>tools.py</p> <pre><code>from langchain_community.tools.reddit_search.tool import RedditSearchRun\n</code></pre> <p>agents.yaml</p> <pre><code>framework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'RedditSearchRun'\n</code></pre>"},{"location":"tools/tavily/","title":"Tavily PraisonAI Integration","text":"<pre><code>from praisonai_tools import BaseTool\nfrom langchain.utilities.tavily_search import TavilySearchAPIWrapper\n\nclass TavilyTool(BaseTool):\n    name: str = \"TavilyTool\"\n    description: str = \"Search Tavily for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = TavilySearchAPIWrapper()\n        results = api_wrapper.results(query=query, max_results=5)\n        return results\n</code></pre>"},{"location":"tools/wikipedia/","title":"Wikipedia PraisonAI Integration","text":"<pre><code>pip install wikipedia langchain_community\n</code></pre> <pre><code># tools.py\nfrom langchain_community.utilities import WikipediaAPIWrapper\nclass WikipediaSearchTool(BaseTool):\n    name: str = \"WikipediaSearchTool\"\n    description: str = \"Search Wikipedia for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = WikipediaAPIWrapper(top_k_results=4, doc_content_chars_max=100)\n        results = api_wrapper.load(query=query)\n        return results\n</code></pre> <pre><code># agents.yaml\nframework: crewai\ntopic: research about nvidia growth\nroles:\n  data_collector:\n    backstory: An experienced researcher with the ability to efficiently collect and\n      organize vast amounts of data.\n    goal: Gather information on Nvidia's growth by providing the Ticket Symbol to YahooFinanceNewsTool\n    role: Data Collector\n    tasks:\n      data_collection_task:\n        description: Collect data on Nvidia's growth from various sources such as\n          financial reports, news articles, and company announcements.\n        expected_output: A comprehensive document detailing data points on Nvidia's\n          growth over the years.\n    tools:\n    - 'WikipediaSearchTool'\n</code></pre>"},{"location":"tools/you.com/","title":"You.com PraisonAI Integration","text":"<p><pre><code>export YDC_API_KEY=xxxxxxxxxxxx\n</code></pre> tools.py <pre><code>from langchain_community.utilities.you import YouSearchAPIWrapper\nclass YouSearchTool(BaseTool):\n    name: str = \"You Search Tool\"\n    description: str = \"Search You.com for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = YouSearchAPIWrapper()\n        results = api_wrapper.results(query=query, max_results=5)\n        return results\n</code></pre></p> <p>agents.yaml</p> <pre><code>framework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'YouSearchTool'\n</code></pre>"},{"location":"tools/youtube/","title":"YouTube Search PraisonAI Integration","text":"<pre><code>pip install youtube_search praisonai langchain_community langchain\n</code></pre> <pre><code># tools.py\nfrom langchain_community.tools import YouTubeSearchTool\n</code></pre> <pre><code># agents.yaml\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'YouTubeSearchTool'\n</code></pre>"},{"location":"ui/chat/","title":"PraisonAI Chat","text":""},{"location":"ui/chat/#different-user-interfaces","title":"Different User Interfaces:","text":"Interface Description URL UI Multi Agents such as CrewAI or AutoGen https://docs.praison.ai/ui/ui Chat Chat with 100+ LLMs, single AI Agent https://docs.praison.ai/ui/chat Code Chat with entire Codebase, single AI Agent https://docs.praison.ai/ui/code"},{"location":"ui/chat/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install PraisonAI Chat: <pre><code>pip install \"praisonai[chat]\"\n</code></pre></p> </li> <li> <p>Set up your OpenAI API key: <pre><code>export OPENAI_API_KEY=xxxxxxxx\n</code></pre></p> </li> <li> <p>Launch PraisonAI Chat: <pre><code>praisonai chat\n</code></pre></p> </li> <li> <p>URL : http://localhost:8084/</p> </li> <li> <p>Username: admin</p> </li> <li> <p>Password: admin</p> </li> <li> <p>Set Model name to be gpt-4o-mini in the settings</p> </li> </ol>"},{"location":"ui/chat/#key-features","title":"Key Features","text":""},{"location":"ui/chat/#internet-search","title":"Internet Search","text":"<p>PraisonAI Chat now includes internet search capabilities using Crawl4AI and Tavily. This feature allows you to retrieve up-to-date information during your conversations, enhancing the AI's ability to provide current and relevant information.</p>"},{"location":"ui/chat/#vision-language-model-vlm-support","title":"Vision Language Model (VLM) Support","text":"<p>You can now upload images and ask questions based on them using Vision Language Models. This multimodal support enables visual understanding and analysis within your chat sessions, allowing for a more comprehensive interaction with the AI.</p> <p>To use this feature: 1. Upload an image to the chat interface 2. Ask questions or request analysis based on the uploaded image 3. The VLM will process the image and provide insights or answers based on its visual content</p> <p>These new features significantly expand the capabilities of PraisonAI Chat, allowing for more diverse and informative interactions.</p>"},{"location":"ui/chat/#custom-database","title":"Custom Database","text":"<p>PraisonAI Chat supports custom database configurations, allowing you to use PostgreSQL or other databases instead of the default SQLite database. This is particularly useful for production environments or when you need more advanced database features.</p>"},{"location":"ui/chat/#postgresql-configuration","title":"PostgreSQL Configuration","text":"<p>To use PostgreSQL as your database backend:</p> <ol> <li> <p>Install Required Dependencies <pre><code>pip install psycopg2-binary asyncpg\n</code></pre></p> </li> <li> <p>Set Environment Variables    Add these variables to your <code>.env</code> file:    <pre><code>DATABASE_URL=postgresql+asyncpg://username:password@hostname:port/database_name\nDATABASE_SSL=true  # Optional: Enable if your database requires SSL\n</code></pre></p> </li> </ol> <p>Replace the following with your PostgreSQL details:    - <code>username</code>: Your PostgreSQL username    - <code>password</code>: Your PostgreSQL password    - <code>hostname</code>: Database host (e.g., localhost or remote host)    - <code>port</code>: Database port (default is 5432)    - <code>database_name</code>: Name of your PostgreSQL database</p> <ol> <li>SSL Configuration (Optional)    If your PostgreSQL server requires SSL, set <code>DATABASE_SSL=true</code> in your environment variables.</li> </ol>"},{"location":"ui/chat/#default-configuration","title":"Default Configuration","text":"<p>If no <code>DATABASE_URL</code> is provided, PraisonAI Chat will automatically use SQLite with the following default configuration: <pre><code>DATABASE_URL=sqlite+aiosqlite:///{HOME}/.praison/database.sqlite\n</code></pre></p>"},{"location":"ui/chat/#supported-database-types","title":"Supported Database Types","text":"<p>PraisonAI Chat supports various database backends through SQLAlchemy: - PostgreSQL (recommended for production) - MySQL/MariaDB - SQLite (default) - Oracle - Microsoft SQL Server</p> <p>For other database types, refer to the SQLAlchemy documentation for the correct connection string format.</p>"},{"location":"ui/code/","title":"PraisonAI Code","text":"<p>PraisonAI Code helps you to interact with your whole codebase using the power of AI.</p>"},{"location":"ui/code/#different-user-interfaces","title":"Different User Interfaces:","text":"Interface Description URL UI Multi Agents such as CrewAI or AutoGen https://docs.praison.ai/ui/ui Chat Chat with 100+ LLMs, single AI Agent https://docs.praison.ai/ui/chat Code Chat with entire Codebase, single AI Agent https://docs.praison.ai/ui/code"},{"location":"ui/code/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Install PraisonAI Code</li> <li>Other Models</li> <li>To Use Gemini 1.5</li> <li>Ignore Files</li> <li>Using .praisonignore</li> <li>Using settings.yaml</li> <li>Using .env File</li> <li>Using Environment Variables in the Terminal</li> <li>Include Files</li> <li>Set Max Tokens</li> </ul>"},{"location":"ui/code/#install-praisonai-code","title":"Install PraisonAI Code","text":"<ol> <li> <pre><code>pip install \"praisonai[code]\"\n</code></pre> </li> <li> <pre><code>export OPENAI_API_KEY=xxxxxxxx\n</code></pre> </li> <li> <pre><code>praisonai code\n</code></pre> </li> <li> <p>Username and Password will be asked for the first time. <code>admin</code> is the default username and password.</p> </li> <li> <p>Set Model name to be gpt-4o-mini in the settings </p> </li> </ol>"},{"location":"ui/code/#other-models","title":"Other Models","text":"<ul> <li>Use 100+ LLMs - Litellm</li> <li>Includes Gemini 1.5 for 2 Million Context Length</li> </ul>"},{"location":"ui/code/#to-use-gemini-15","title":"To Use Gemini 1.5","text":"<ul> <li><code>export GEMINI_API_KEY=xxxxxxxxx</code></li> <li><code>praisonai code</code></li> <li>Set Model name to be <code>gemini/gemini-1.5-flash</code> in the settings</li> </ul>"},{"location":"ui/code/#ignore-files","title":"Ignore Files","text":""},{"location":"ui/code/#using-praisonignore","title":"Using .praisonignore","text":"<ul> <li>Create a <code>.praisonignore</code> file in the root folder of the project</li> <li>Add files to ignore</li> </ul> <pre><code>.*\n*.pyc\npycache\n.git\n.gitignore\n.vscode\n.idea\n.DS_Store\n.lock\n.pyc\n.env\n</code></pre>"},{"location":"ui/code/#using-settingsyaml","title":"Using settings.yaml","text":"<p>(.praisonignore is preferred)</p> <ul> <li>Create a <code>settings.yaml</code> file in the root folder of the project</li> <li>Add below Variables and required Ignore Files</li> </ul> <pre><code>code:\n  ignore_files:\n  - \".*\"\n  - \"*.pyc\"\n  - \"pycache\"\n  - \".git\"\n  - \".gitignore\"\n  - \".vscode\"\n  - \".idea\"\n  - \".DS_Store\"\n  - \".lock\"\n  - \".pyc\"\n  - \".env\"\n</code></pre>"},{"location":"ui/code/#using-env-file","title":"Using .env File","text":"<ul> <li>Create a <code>.env</code> file in the root folder of the project</li> <li>Add below Variables and required Ignore Files</li> </ul> <pre><code>PRAISONAI_IGNORE_FILES=\".*,*.pyc,__pycache__,.git,.gitignore,.vscode\"\n</code></pre>"},{"location":"ui/code/#using-environment-variables-in-the-terminal","title":"Using Environment Variables in the Terminal","text":"<pre><code>export PRAISONAI_IGNORE_FILES=\".*,*.pyc,__pycache__,.git,.gitignore,.vscode\"\n</code></pre>"},{"location":"ui/code/#include-files-praisoninclude","title":"Include Files .praisoninclude","text":"<ul> <li>Add files you wish to Include files in the context</li> <li> <p>This will include the files/folders mentioned in <code>.praisoninclude</code> to the original context (files in the folder - .gitignore  - .praisonignore)</p> </li> <li> <p>Create a <code>.praisoninclude</code> file in the root folder of the project</p> </li> <li>Add files to Include</li> </ul> <pre><code>projectfiles\ndocs\n</code></pre>"},{"location":"ui/code/#include-only-these-files-praisoncontext-context","title":"Include ONLY these Files .praisoncontext (Context)","text":"<ul> <li>Add files you wish to Include files in the context</li> <li> <p>This will include ONLY the files/folders mentioned in <code>.praisoncontext</code> to the context</p> </li> <li> <p>Create a <code>.praisoncontext</code> file in the root folder of the project</p> </li> <li>Add files to Include</li> </ul> <pre><code>projectfiles\ndocs\n</code></pre>"},{"location":"ui/code/#set-max-tokens","title":"Set Max Tokens","text":"<p>Note: By Default Max Tokens set is 900,000</p> <pre><code>export PRAISONAI_MAX_TOKENS=1000000\n</code></pre> <p>or </p> <ul> <li>Create a .env file in the root folder of the project</li> <li>Add below Variables and required Max Tokens</li> <li><code>PRAISONAI_MAX_TOKENS=1000000</code></li> </ul>"},{"location":"ui/code/#default-db-location","title":"Default DB Location","text":"<p><code>~/.praison/database.sqlite</code></p>"},{"location":"ui/code/#key-features","title":"Key Features","text":""},{"location":"ui/code/#internet-search","title":"Internet Search","text":"<p>PraisonAI Code now includes internet search capabilities using Crawl4AI and Tavily. This feature allows you to retrieve up-to-date information and code snippets during your coding sessions, enhancing your ability to find relevant programming information and examples.</p> <p>To use this feature: 1. Ask a question or request information about a specific coding topic 2. The AI will use internet search to find the most relevant and current information 3. You'll receive code snippets, documentation references, or explanations based on the latest available resources</p>"},{"location":"ui/code/#vision-language-model-vlm-support","title":"Vision Language Model (VLM) Support","text":"<p>While primarily designed for code interactions, PraisonAI Code also supports Vision Language Model capabilities. This feature can be particularly useful when dealing with visual aspects of programming, such as UI design, data visualization, or understanding code structure through diagrams.</p> <p>To use this feature: 1. Upload an image related to your coding query (e.g., a screenshot of a UI, a flowchart, or a code snippet image) 2. Ask questions or request analysis based on the uploaded image 3. The VLM will process the image and provide insights or answers based on its visual content, helping you understand or implement the visual concepts in your code</p> <p>These new features significantly expand the capabilities of PraisonAI Code, allowing for more comprehensive and up-to-date coding assistance.</p>"},{"location":"ui/realtime/","title":"Realtime Voice Interface","text":""},{"location":"ui/realtime/#features","title":"Features","text":"<ul> <li>Real-time voice input processing</li> <li>Text-to-speech output for AI responses</li> <li>Seamless integration with OpenAI's realtime API</li> <li>Support for various AI models</li> <li>Persistent conversation history</li> <li>Financial data integration with yfinance</li> </ul>"},{"location":"ui/realtime/#getting-started","title":"Getting Started","text":"<p>To use the Realtime Voice Interface, follow these steps:</p> <ol> <li> <p>Install PraisonAI with the realtime dependencies:    <pre><code>pip install \"praisonai[realtime]\"\n</code></pre></p> </li> <li> <p>Set up your OpenAI API key:    <pre><code>export OPENAI_API_KEY=\"your-api-key-here\"\n</code></pre></p> </li> <li> <p>Launch the Realtime Voice Interface:    <pre><code>praisonai realtime\n</code></pre></p> </li> </ol>"},{"location":"ui/realtime/#usage","title":"Usage","text":"<p>Once the interface is launched:</p> <ol> <li>Click the microphone button or press 'P' to start voice input.</li> <li>Speak your message or query.</li> <li>The AI will process your input and respond with both text and voice.</li> <li>You can ask for financial data, which will be fetched using yfinance.</li> <li>The conversation history is maintained for context in ongoing discussions.</li> </ol>"},{"location":"ui/realtime/#configuration","title":"Configuration","text":"<p>You can configure various aspects of the Realtime Voice Interface:</p> <ul> <li>Model selection: Choose different AI models for processing.</li> <li>Voice settings: Adjust voice characteristics for the AI's speech output.</li> <li>Audio settings: Configure input/output audio formats and quality.</li> </ul>"},{"location":"ui/realtime/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ul> <li>Ensure your microphone is properly connected and permitted in your browser.</li> <li>Check your internet connection for stable real-time communication.</li> <li>Verify that your OpenAI API key is correctly set and has the necessary permissions.</li> </ul> <p>For more detailed information and advanced usage, please refer to the PraisonAI documentation.</p>"},{"location":"ui/ui/","title":"PraisonAI User Interface (UI)","text":""},{"location":"ui/ui/#different-user-interfaces","title":"Different User Interfaces:","text":"Interface Description URL UI Multi Agents such as CrewAI or AutoGen https://docs.praison.ai/ui/ui Chat Chat with 100+ LLMs, single AI Agent https://docs.praison.ai/ui/chat Code Chat with entire Codebase, single AI Agent https://docs.praison.ai/ui/code"},{"location":"ui/ui/#chainlitbash","title":"Chainlit```bash","text":"<p>pip install -U \"praisonai[ui]\" export OPENAI_API_KEY=\"Enter your API key\" chainlit create-secret export CHAINLIT_AUTH_SECRET=xxxxxxxx praisonai ui <pre><code>or \n\n```bash\npython -m praisonai ui\n</code></pre></p> <p>Default Username: admin Default Password: admin</p>"},{"location":"ui/ui/#to-change-username-and-password","title":"To Change Username and Password","text":"<p>create .env file in the root folder of the project Add below Variables and required Username/Password <pre><code>CHAINLIT_USERNAME=admin\nCHAINLIT_USERNAME=admin\n</code></pre></p>"},{"location":"ui/ui/#gradio","title":"Gradio","text":"<pre><code>pip install \"praisonai[gradio]\"\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --ui gradio\n</code></pre>"},{"location":"ui/ui/#streamlit","title":"Streamlit","text":"<pre><code>git clone https://github.com/leporejoseph/PraisonAi-Streamlit\ncd PraisonAi-Streamlit\npip install -r requirements.txt\nstreamlit run app.py\n</code></pre>"},{"location":"ui/ui/#using-chainlit-with-pictures","title":"Using Chainlit (with Pictures)","text":""},{"location":"ui/ui/#run-automatically","title":"Run Automatically","text":""},{"location":"ui/ui/#install-required-package","title":"Install Required Package","text":""},{"location":"ui/ui/#user-interface","title":"User Interface","text":""},{"location":"ui/ui/#select-auto-mode","title":"Select Auto Mode","text":""},{"location":"ui/ui/#configure-agent-settings","title":"Configure Agent Settings","text":""},{"location":"ui/ui/#define-a-task-to-auto-generate-agents-and-run","title":"Define a Task to Auto Generate Agents and Run","text":""},{"location":"ui/ui/#output","title":"Output","text":""},{"location":"ui/ui/#run-manually","title":"Run Manually","text":""},{"location":"ui/ui/#select-manual-mode","title":"Select Manual Mode","text":""},{"location":"ui/ui/#modify-agents-and-tools","title":"Modify Agents and Tools","text":""},{"location":"ui/ui/#review-generated-agents","title":"Review Generated Agents","text":""},{"location":"ui/ui/#run-agents","title":"Run Agents","text":""},{"location":"ui/ui/#manual-model-output","title":"Manual Model Output","text":""},{"location":"ui/ui/#praisonai-call","title":"PraisonAI Call","text":"<p>To use the PraisonAI Call feature:</p>"}]}