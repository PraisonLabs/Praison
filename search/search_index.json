{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PraisonAI","text":"<p>This is the documentation for PraisonAI.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#praisonai.deploy.CloudDeployer","title":"<code>CloudDeployer</code>","text":"Source code in <code>praisonai/deploy.py</code> <pre><code>class CloudDeployer:\n    def __init__(self):\n        # Load environment variables from .env file or system\n        load_dotenv()\n        self.set_environment_variables()\n\n    def create_dockerfile(self):\n        with open(\"Dockerfile\", \"w\") as file:\n            file.write(\"FROM python:3.11-slim\\n\")\n            file.write(\"WORKDIR /app\\n\")\n            file.write(\"COPY . .\\n\")\n            file.write(\"RUN pip install flask praisonai==0.0.21 gunicorn markdown\\n\")\n            file.write(\"EXPOSE 8080\\n\")\n            file.write('CMD [\"gunicorn\", \"-b\", \"0.0.0.0:8080\", \"api:app\"]\\n')\n\n    def create_api_file(self):\n        with open(\"api.py\", \"w\") as file:\n            file.write(\"from flask import Flask\\n\")\n            file.write(\"from praisonai import PraisonAI\\n\")\n            file.write(\"import markdown\\n\\n\")\n            file.write(\"app = Flask(__name__)\\n\\n\")\n            file.write(\"def basic():\\n\")\n            file.write(\"    praison_ai = PraisonAI(agent_file=\\\"agents.yaml\\\")\\n\")\n            file.write(\"    return praison_ai.main()\\n\\n\")\n            file.write(\"@app.route('/')\\n\")\n            file.write(\"def home():\\n\")\n            file.write(\"    output = basic()\\n\")\n            file.write(\"    html_output = markdown.markdown(output)\\n\")\n            file.write(\"    return f'&lt;html&gt;&lt;body&gt;{html_output}&lt;/body&gt;&lt;/html&gt;'\\n\\n\")\n            file.write(\"if __name__ == \\\"__main__\\\":\\n\")\n            file.write(\"    app.run(debug=True)\\n\")\n\n    def set_environment_variables(self):\n        \"\"\"Sets environment variables with fallback to .env values or defaults.\"\"\"\n        os.environ[\"OPENAI_MODEL_NAME\"] = os.getenv(\"OPENAI_MODEL_NAME\", \"gpt-4-turbo-preview\")\n        os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\", \"Enter your API key\")\n        os.environ[\"OPENAI_API_BASE\"] = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\")\n\n    def run_commands(self):\n        self.create_api_file()\n        self.create_dockerfile()\n        \"\"\"Runs a sequence of shell commands for deployment, continues on error.\"\"\"\n        commands = [\n            \"yes | gcloud auth configure-docker us-central1-docker.pkg.dev\",\n            \"gcloud artifacts repositories create praisonai-repository --repository-format=docker --location=us-central1\",\n            \"docker build --platform linux/amd64 -t gcr.io/$(gcloud config get-value project)/praisonai-app:latest .\",\n            \"docker tag gcr.io/$(gcloud config get-value project)/praisonai-app:latest us-central1-docker.pkg.dev/$(gcloud config get-value project)/praisonai-repository/praisonai-app:latest\",\n            \"docker push us-central1-docker.pkg.dev/$(gcloud config get-value project)/praisonai-repository/praisonai-app:latest\",\n            \"gcloud run deploy praisonai-service --image us-central1-docker.pkg.dev/$(gcloud config get-value project)/praisonai-repository/praisonai-app:latest --platform managed --region us-central1 --allow-unauthenticated --set-env-vars OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME},OPENAI_API_KEY=${OPENAI_API_KEY},OPENAI_API_BASE=${OPENAI_API_BASE}\"\n        ]\n\n        for cmd in commands:\n            try:\n                subprocess.run(cmd, shell=True, check=True)\n            except subprocess.CalledProcessError as e:\n                print(f\"ERROR: Command '{e.cmd}' failed with exit status {e.returncode}\")\n                print(f\"Continuing with the next command...\")\n</code></pre>"},{"location":"api/#praisonai.deploy.CloudDeployer.set_environment_variables","title":"<code>set_environment_variables()</code>","text":"<p>Sets environment variables with fallback to .env values or defaults.</p> Source code in <code>praisonai/deploy.py</code> <pre><code>def set_environment_variables(self):\n    \"\"\"Sets environment variables with fallback to .env values or defaults.\"\"\"\n    os.environ[\"OPENAI_MODEL_NAME\"] = os.getenv(\"OPENAI_MODEL_NAME\", \"gpt-4-turbo-preview\")\n    os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\", \"Enter your API key\")\n    os.environ[\"OPENAI_API_BASE\"] = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\")\n</code></pre>"},{"location":"api/#praisonai.auto.AutoGenerator","title":"<code>AutoGenerator</code>","text":"Source code in <code>praisonai/auto.py</code> <pre><code>class AutoGenerator:\n    def __init__(self, topic=\"Movie Story writing about AI\", agent_file=\"test.yaml\", framework=\"crewai\"):\n        self.config_list = [\n            {\n                'model': os.environ.get(\"OPENAI_MODEL_NAME\", \"gpt-4-turbo-preview\"),\n                'base_url': os.environ.get(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\"),\n            }\n        ]\n        self.topic = topic\n        self.agent_file = agent_file\n        self.framework = framework\n        self.client = instructor.patch(\n            OpenAI(\n                base_url=self.config_list[0]['base_url'],\n                api_key=os.getenv(\"OPENAI_API_KEY\"),\n            ),\n            mode=instructor.Mode.JSON,\n        )\n\n    def generate(self):\n        response = self.client.chat.completions.create(\n            model=self.config_list[0]['model'],\n            response_model=TeamStructure,\n            max_retries=10,\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output complex team structures.\"},\n                {\"role\": \"user\", \"content\": self.get_user_content()}\n            ]\n        )\n        json_data = json.loads(response.model_dump_json())\n        self.convert_and_save(json_data)\n        full_path = os.path.abspath(self.agent_file)\n        return full_path\n\n    def convert_and_save(self, json_data):\n        \"\"\"Converts the provided JSON data into the desired YAML format and saves it to a file.\n\n        Args:\n            json_data (dict): The JSON data representing the team structure.\n            topic (str, optional): The topic to be inserted into the YAML. Defaults to \"Artificial Intelligence\".\n            agent_file (str, optional): The name of the YAML file to save. Defaults to \"test.yaml\".\n        \"\"\"\n\n        yaml_data = {\n            \"framework\": self.framework,\n            \"topic\": self.topic,\n            \"roles\": {},\n            \"dependencies\": []\n        }\n\n        for role_id, role_details in json_data['roles'].items():\n            yaml_data['roles'][role_id] = {\n                \"backstory\": \"\" + role_details['backstory'],\n                \"goal\": role_details['goal'],\n                \"role\": role_details['role'],\n                \"tasks\": {},\n                # \"tools\": role_details.get('tools', []),\n                \"tools\": ['']\n            }\n\n            for task_id, task_details in role_details['tasks'].items():\n                yaml_data['roles'][role_id]['tasks'][task_id] = {\n                    \"description\": \"\" + task_details['description'],\n                    \"expected_output\": \"\" + task_details['expected_output']\n                }\n\n        # Save to YAML file, maintaining the order\n        with open(self.agent_file, 'w') as f:\n            yaml.dump(yaml_data, f, allow_unicode=True, sort_keys=False)\n\n    def get_user_content(self):\n        user_content = \"\"\"Generate a team structure for  \\\"\"\"\" + self.topic + \"\"\"\\\" task. \nNo Input data will be provided to the team.\nThe team will work in sequence. First role will pass the output to the next role, and so on.\nThe last role will generate the final output.\nThink step by step.\nWith maximum 3 roles, each with 1 task. Include role goals, backstories, task descriptions, and expected outputs.\nList of Available Tools: CodeDocsSearchTool, CSVSearchTool, DirectorySearchTool, DOCXSearchTool, DirectoryReadTool, FileReadTool, TXTSearchTool, JSONSearchTool, MDXSearchTool, PDFSearchTool, RagTool, ScrapeElementFromWebsiteTool, ScrapeWebsiteTool, WebsiteSearchTool, XMLSearchTool, YoutubeChannelSearchTool, YoutubeVideoSearchTool.\nOnly use Available Tools. Do Not use any other tools. \nExample Below: \nUse below example to understand the structure of the output. \nThe final role you create should satisfy the provided task: \"\"\" + self.topic + \"\"\".\n{\n\"roles\": {\n\"narrative_designer\": {\n\"role\": \"Narrative Designer\",\n\"goal\": \"Create AI storylines\",\n\"backstory\": \"Skilled in narrative development for AI, with a focus on story resonance.\",\n\"tools\": [\"ScrapeWebsiteTool\"],\n\"tasks\": {\n\"story_concept_development\": {\n\"description\": \"Craft a unique AI story concept with depth and engagement using concept from this page the content https://www.asthebirdfliesblog.com/posts/how-to-write-book-story-development .\",\n\"expected_output\": \"Document with narrative arcs, character bios, and settings.\"\n}\n}\n},\n\"scriptwriter\": {\n\"role\": \"Scriptwriter\",\n\"goal\": \"Write scripts from AI concepts\",\n\"backstory\": \"Expert in dialogue and script structure, translating concepts into scripts.\",\n\"tasks\": {\n\"scriptwriting_task\": {\n\"description\": \"Turn narrative concepts into scripts, including dialogue and scenes.\",\n\"expected_output\": \"Production-ready script with dialogue and scene details.\"\n}\n}\n}\n}\n}\n        \"\"\"\n        return user_content\n</code></pre>"},{"location":"api/#praisonai.auto.AutoGenerator.convert_and_save","title":"<code>convert_and_save(json_data)</code>","text":"<p>Converts the provided JSON data into the desired YAML format and saves it to a file.</p> <p>Parameters:</p> Name Type Description Default <code>json_data</code> <code>dict</code> <p>The JSON data representing the team structure.</p> required <code>topic</code> <code>str</code> <p>The topic to be inserted into the YAML. Defaults to \"Artificial Intelligence\".</p> required <code>agent_file</code> <code>str</code> <p>The name of the YAML file to save. Defaults to \"test.yaml\".</p> required Source code in <code>praisonai/auto.py</code> <pre><code>def convert_and_save(self, json_data):\n    \"\"\"Converts the provided JSON data into the desired YAML format and saves it to a file.\n\n    Args:\n        json_data (dict): The JSON data representing the team structure.\n        topic (str, optional): The topic to be inserted into the YAML. Defaults to \"Artificial Intelligence\".\n        agent_file (str, optional): The name of the YAML file to save. Defaults to \"test.yaml\".\n    \"\"\"\n\n    yaml_data = {\n        \"framework\": self.framework,\n        \"topic\": self.topic,\n        \"roles\": {},\n        \"dependencies\": []\n    }\n\n    for role_id, role_details in json_data['roles'].items():\n        yaml_data['roles'][role_id] = {\n            \"backstory\": \"\" + role_details['backstory'],\n            \"goal\": role_details['goal'],\n            \"role\": role_details['role'],\n            \"tasks\": {},\n            # \"tools\": role_details.get('tools', []),\n            \"tools\": ['']\n        }\n\n        for task_id, task_details in role_details['tasks'].items():\n            yaml_data['roles'][role_id]['tasks'][task_id] = {\n                \"description\": \"\" + task_details['description'],\n                \"expected_output\": \"\" + task_details['expected_output']\n            }\n\n    # Save to YAML file, maintaining the order\n    with open(self.agent_file, 'w') as f:\n        yaml.dump(yaml_data, f, allow_unicode=True, sort_keys=False)\n</code></pre>"}]}